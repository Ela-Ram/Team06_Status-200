{
	"info": {
		"_postman_id": "e02443dd-ae42-4870-a053-de5501ce49c9",
		"name": "Team 06_Status 200",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42936802",
		"_collection_link": "https://status-200-6444.postman.co/workspace/Team06_Status-200~0f577a50-9a7c-40e4-8586-24bd8093304b/collection/42936802-e02443dd-ae42-4870-a053-de5501ce49c9?action=share&source=collection_link&creator=42936802"
	},
	"item": [
		{
			"name": "Login",
			"item": []
		},
		{
			"name": "Program",
			"item": []
		},
		{
			"name": "Batch",
			"item": []
		},
		{
			"name": "Class",
			"item": []
		},
		{
			"name": "User(Post,Get)",
			"item": [
				{
					"name": "Login for Bearer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();  // Parse JSON response\r",
									"pm.collectionVariables.set(\"authToken\", response.token);  // Store token in collection variable\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{username}}\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/login",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating User with Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(\"Full API Response:\", JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"    if (jsonData.user && jsonData.user.userId) {\r",
									"        var roleId = jsonData.roles && jsonData.roles.length > 0 ? jsonData.roles[0].roleId : null;\r",
									"        var userId = jsonData.user.userId;\r",
									"\r",
									"        // Check if roleId is available and assign userId accordingly\r",
									"        if (roleId === \"R01\") {\r",
									"            pm.collectionVariables.set(\"adminUserId\", userId);\r",
									"            console.log(\"Admin User ID saved:\", userId);\r",
									"        } else if (roleId === \"R02\") {\r",
									"            pm.collectionVariables.set(\"staffUserId\", userId);\r",
									"            console.log(\"Staff User ID saved:\", userId);\r",
									"        } else if (roleId === \"R03\") {\r",
									"            pm.collectionVariables.set(\"studentUserId\", userId);\r",
									"            console.log(\"Student User ID saved:\", userId);\r",
									"        } else {\r",
									"            console.log(\"Role not found. No User ID saved.\");\r",
									"        }\r",
									"\r",
									"        // Retrieve or initialize the userIds array correctly\r",
									"        let userIds = pm.collectionVariables.get(\"userIds\");\r",
									"        \r",
									"        if (!userIds) {\r",
									"            userIds = []; // Initialize as an empty array if it doesn't exist\r",
									"        } else {\r",
									"            try {\r",
									"                userIds = JSON.parse(userIds); // Parse if already exists\r",
									"            } catch (e) {\r",
									"                console.log(\"Error parsing userIds, resetting to empty array.\");\r",
									"                userIds = [];\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Add the new userId to the array (if it's not already present)\r",
									"        if (!userIds.includes(userId)) {\r",
									"            userIds.push(userId);\r",
									"        }\r",
									"\r",
									"        // Save the updated array back into the collection variable\r",
									"        pm.collectionVariables.set(\"userIds\", JSON.stringify(userIds));\r",
									"        console.log(\"Updated userIds array:\", userIds);\r",
									"    } else {\r",
									"        console.log(\"User data or userId missing in the response.\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let scenario1 = pm.iterationData.get(\"scenario1\") || pm.variables.get(\"scenario1\");\r",
									"let endpoint = pm.variables.get(\"endpoint\");\r",
									"\r",
									"let baseUrl;\r",
									"\r",
									"if (scenario1 === \"invalidBaseURL\") {\r",
									"    baseUrl = pm.iterationData.get(\"invalidBase_URL\") || pm.variables.get(\"invalidBase_URL\");\r",
									"} else {\r",
									"    baseUrl = pm.environment.get(\"Base_URL\");\r",
									"}\r",
									"\r",
									"let newUrl = baseUrl + endpoint;\r",
									"pm.request.url = newUrl;\r",
									"console.log(\"Using URL:\", newUrl);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userComments\": \"{{userComments}}\",\r\n    \"userEduPg\": \"{{userEduPg}}\",\r\n    \"userEduUg\": \"{{userEduUg}}\",\r\n    \"userFirstName\": \"{{userFirstName}}\",\r\n    \"userLastName\": \"{{userLastName}}\",\r\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n    \"userLocation\": \"{{userLocation}}\",\r\n    \"userMiddleName\": \"{{userMiddleName}}\",\r\n    \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n    \"userRoleMaps\": [\r\n        {\r\n            \"roleId\": \"{{roleId}}\",\r\n            \"userRoleStatus\":\"{{userRoleStatus}}\"\r\n        }\r\n    ],\r\n    \"userTimeZone\":\"{{userTimeZone}}\",\r\n    \"userVisaStatus\":\"{{userVisaStatus}}\",\r\n    \"userLogin\": {\r\n        \"loginStatus\":\"{{loginStatus}}\",\r\n        \"userLoginEmail\":\"{{userLoginEmail}}\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let endpoint = pm.variables.get(\"endpoint\");\r",
									"\r",
									"\r",
									"  if (endpoint) {\r",
									"    pm.variables.set(\"endpoint\", endpoint);\r",
									"    \r",
									"}else{\r",
									"    console.log(\"no endpoint\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Count of Active/Inactive Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let adminRollid = pm.collectionVariables.get(\"Admin_rollid\");\r",
									"let staffRollid = pm.collectionVariables.get(\"Staff_rollid\");\r",
									"let studentRollid = pm.collectionVariables.get(\"Student_rollid\");\r",
									"let scenario1 = pm.variables.get(\"scenario1\");\r",
									"let endpoint = pm.variables.get(\"endpoint\");\r",
									"\r",
									"let baseUrl = pm.environment.get(\"Base_URL\");\r",
									"\r",
									"if (scenario1 === \"by all\") {\r",
									"    let idValue = pm.variables.get(\"idValue\"); \r",
									"    let fullUrl = `${baseUrl}${endpoint}?id=${idValue}`; \r",
									"    pm.request.url = fullUrl; \r",
									"}else if (scenario1 === \"by Admin rollId\") \r",
									"{\r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${adminRollid}`;\r",
									"        pm.request.url = fullUrl;\r",
									" } else if(scenario1 ===\"by Admin invalid rollId\") {\r",
									"        let idValue = pm.variables.get(\"idValue\"); \r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${idValue}`; \r",
									"        pm.request.url = fullUrl; \r",
									"\r",
									"} else if (scenario1 === \"by Staff rollId\") {\r",
									"  \r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${staffRollid}`;\r",
									"        pm.request.url = fullUrl;\r",
									"    } else if(scenario1 === \"by Staff invalid rollId\") {\r",
									"        let idValue = pm.variables.get(\"idValue\"); \r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${idValue}`; \r",
									"        pm.request.url = fullUrl; \r",
									"    } else if (scenario1 === \"by Student rollId\") {\r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${studentRollid}`;\r",
									"        pm.request.url = fullUrl; \r",
									"    } else if (scenario1 === \"by Student invalid rollId\") {\r",
									"        let idValue = pm.variables.get(\"idValue\"); \r",
									"        let fullUrl = `${baseUrl}${endpoint}?id=${idValue}`; \r",
									"        pm.request.url = fullUrl; \r",
									"    }\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" \r",
									"\r",
									"\r",
									"if ((pm.response.code !== 404)&&(pm.response.code !== 401)) {\r",
									"pm.test(\"Response contains status and count\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(jsonData[0]).to.have.property('status');\r",
									"    pm.expect(jsonData[0]).to.have.property('count');\r",
									"    pm.expect(jsonData[0].status).to.be.a('string');\r",
									"    pm.expect(jsonData[0].count).to.be.a('number');\r",
									"});\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by IDs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let scenario1 = pm.variables.get(\"scenario1\");\r",
									"if (pm.response.code === 200){\r",
									"\r",
									"if(scenario1===\"by usersid\"){\r",
									"pm.test(\"Validate response contains correct userId\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let expectedUserId = pm.collectionVariables.get(\"Admin_userId\");\r",
									"\r",
									"    pm.expect(jsonData.user).to.have.property(\"userId\", expectedUserId);\r",
									"});\r",
									"}\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by UserId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"let scenario = pm.variables.get(\"scenario1\");\r",
									"let roleId = pm.variables.get(\"roleId\");\r",
									"let endpoint= pm.variables.get(\"endpoint\");\r",
									"\r",
									"\r",
									"if (scenario === \"by usersid\") {\r",
									"    let userIdForGetRequest = null;\r",
									"\r",
									"    \r",
									"    if (roleId === \"R01\") {\r",
									"        // For Admin (R01), use adminUserId from collection variables\r",
									"        userIdForGetRequest = pm.collectionVariables.get(\"adminUserId\");\r",
									"        console.log(\"Using Admin User ID for GET operation:\", userIdForGetRequest);\r",
									"    \r",
									"        endpoint += `/${userIdForGetRequest}`;\r",
									"        \r",
									"    } else if (roleId === \"R02\") {\r",
									"        \r",
									"        userIdForGetRequest = pm.collectionVariables.get(\"staffUserId\");\r",
									"        console.log(\"Using Staff User ID for GET operation:\", userIdForGetRequest);\r",
									"        \r",
									"        \r",
									"        endpoint += `/${userIdForGetRequest}`;\r",
									"        \r",
									"    } else if (roleId === \"R03\") {\r",
									"        // For Student (R03), use studentUserId from collection variables\r",
									"        userIdForGetRequest = pm.collectionVariables.get(\"studentUserId\");\r",
									"        console.log(\"Using Student User ID for GET operation:\", userIdForGetRequest);\r",
									"        \r",
									"        endpoint += `/${userIdForGetRequest}`;\r",
									"    }\r",
									"\r",
									"    pm.variables.set(\"endpoint\", endpoint);\r",
									"    console.log(\"Updated endpoint:\", endpoint);\r",
									"\r",
									"} else {\r",
									"    console.log(\"No valid scenario found\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All users Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve stored userIds from collection variables\r",
									"let userIds = pm.collectionVariables.get(\"userIds\");\r",
									"\r",
									"// Parse the stored array or initialize an empty array\r",
									"userIds = userIds ? JSON.parse(userIds) : [];\r",
									"\r",
									"if (userIds.length > 0) {\r",
									"    // Loop through each userId and send a DELETE request\r",
									"    userIds.forEach(userId => {\r",
									"        let deleteUrl = `${pm.environment.get(\"Base_URL\")}/users/${userId}`;\r",
									"        \r",
									"        pm.sendRequest({\r",
									"            url: deleteUrl,\r",
									"            method: 'DELETE',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.environment.get(\"auth_token\")  // Add auth token if required\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(`Failed to delete user with ID: ${userId}`);\r",
									"            } else {\r",
									"                console.log(`Successfully deleted user with ID: ${userId}`);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Clear the collection variable after deletion\r",
									"    pm.collectionVariables.unset(\"userIds\");\r",
									"    console.log(\"Cleanup completed: userIds removed from collection variables.\");\r",
									"} else {\r",
									"    console.log(\"No userIds found for cleanup.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userIds\": [\r\n    \"{{adminUserId}}\",\r\n    \"{{staffUserId}}\",\r\n    \"{{studentUserId}}\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/{{userId}}",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							"let getallSchema = {\r",
							"\r",
							"    \"type\": \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userFirstName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLastName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userMiddleName\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                },\r",
							"                \"userPhoneNumber\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLocation\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userTimeZone\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLinkedinUrl\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                },\r",
							"                \"userEduUg\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                },\r",
							"                \"userEduPg\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                },\r",
							"                \"userComments\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                },\r",
							"                \"userVisaStatus\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLoginEmail\": {\r",
							"                    \"type\": [\"string\", \"null\"]\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userId\",\r",
							"                \"userFirstName\",\r",
							"                \"userLastName\",\r",
							"                //  \"userMiddleName\",\r",
							"                \"userPhoneNumber\",\r",
							"                \"userLocation\",\r",
							"                \"userTimeZone\",\r",
							"                \"userLinkedinUrl\",\r",
							"                \"userEduUg\",\r",
							"                \"userEduPg\",\r",
							"                \"userComments\",\r",
							"                \"userVisaStatus\",\r",
							"                \"userLoginEmail\"\r",
							"            ]\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"let getidSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"user\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userFirstName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLastName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userMiddleName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userPhoneNumber\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLocation\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userTimeZone\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLinkedinUrl\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduUg\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduPg\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userComments\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userVisaStatus\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLoginEmail\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userId\",\r",
							"                \"userFirstName\",\r",
							"                \"userLastName\",\r",
							"                \"userMiddleName\",\r",
							"                \"userPhoneNumber\",\r",
							"                \"userLocation\",\r",
							"                \"userTimeZone\",\r",
							"                \"userLinkedinUrl\",\r",
							"                \"userEduUg\",\r",
							"                \"userEduPg\",\r",
							"                \"userComments\",\r",
							"                \"userVisaStatus\",\r",
							"                \"userLoginEmail\"\r",
							"            ]\r",
							"        },\r",
							"        \"roles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"roleId\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"userRoleStatus\": {\r",
							"                            \"type\": \"string\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"required\": [\r",
							"                        \"roleId\",\r",
							"                        \"userRoleStatus\"\r",
							"                    ]\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"user\",\r",
							"        \"roles\"\r",
							"    ]\r",
							"}\r",
							"let getuserbyroleSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"roleId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"roleName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userFirstName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLastName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userRoleStatus\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userPhoneNumber\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLocation\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userTimeZone\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLinkedinUrl\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"userEduUg\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userVisaStatus\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLoginEmail\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"roleId\",\r",
							"                \"roleName\",\r",
							"                \"userId\",\r",
							"                \"userFirstName\",\r",
							"                \"userLastName\",\r",
							"                \"userRoleStatus\",\r",
							"                \"userPhoneNumber\",\r",
							"                \"userLocation\",\r",
							"                \"userTimeZone\",\r",
							"                \"userLinkedinUrl\",\r",
							"                \"userEduUg\",\r",
							"                \"userVisaStatus\",\r",
							"                \"userLoginEmail\"\r",
							"            ]\r",
							"        },\r",
							"        {\r",
							"            \"type\": \"object\"\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"getbybatchIdSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userFirstName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLastName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userMiddleName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userPhoneNumber\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLocation\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userTimeZone\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLinkedinUrl\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduUg\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduPg\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userComments\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userVisaStatus\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userLoginEmail\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userId\",\r",
							"                \"userFirstName\",\r",
							"                \"userLastName\",\r",
							"                \"userMiddleName\",\r",
							"                \"userPhoneNumber\",\r",
							"                \"userLocation\",\r",
							"                \"userTimeZone\",\r",
							"                \"userLinkedinUrl\",\r",
							"                \"userEduUg\",\r",
							"                \"userEduPg\",\r",
							"                \"userComments\",\r",
							"                \"userVisaStatus\",\r",
							"                \"userLoginEmail\"\r",
							"            ]\r",
							"        },\r",
							"        \r",
							"    ]\r",
							"}\r",
							"let getuserbyRollidSchema ={\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userFirstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userPhoneNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLocation\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userTimeZone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLinkedinUrl\": {\r",
							"          \"type\": [\"string\", \"null\"]\r",
							"        },\r",
							"        \"userEduUg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduPg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userVisaStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLoginEmail\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"userId\",\r",
							"        \"userFirstName\",\r",
							"        \"userLastName\",\r",
							"        \"userPhoneNumber\",\r",
							"        \"userLocation\",\r",
							"        \"userTimeZone\",\r",
							"        \"userLinkedinUrl\",\r",
							"        \"userEduUg\",\r",
							"        \"userEduPg\",\r",
							"        \"userVisaStatus\",\r",
							"        \"userLoginEmail\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"let getuserbyrollidV2Schema={\r",
							" \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"users\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"userId\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userFirstName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLastName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userMiddleName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userPhoneNumber\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLocation\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userTimeZone\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLinkedinUrl\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userEduUg\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userEduPg\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userComments\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userVisaStatus\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLoginEmail\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"userId\",\r",
							"            \"userFirstName\",\r",
							"            \"userLastName\",\r",
							"            \"userMiddleName\",\r",
							"            \"userPhoneNumber\",\r",
							"            \"userLocation\",\r",
							"            \"userTimeZone\",\r",
							"            \"userLinkedinUrl\",\r",
							"            \"userEduUg\",\r",
							"            \"userEduPg\",\r",
							"            \"userComments\",\r",
							"            \"userVisaStatus\",\r",
							"            \"userLoginEmail\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"users\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"let postvalidSchema={\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"user\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userFirstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userMiddleName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userPhoneNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLocation\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userTimeZone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLinkedinUrl\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduUg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduPg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userComments\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userVisaStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLoginEmail\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"userId\",\r",
							"        \"userFirstName\",\r",
							"        \"userLastName\",\r",
							"        \"userMiddleName\",\r",
							"        \"userPhoneNumber\",\r",
							"        \"userLocation\",\r",
							"        \"userTimeZone\",\r",
							"        \"userLinkedinUrl\",\r",
							"        \"userEduUg\",\r",
							"        \"userEduPg\",\r",
							"        \"userComments\",\r",
							"        \"userVisaStatus\",\r",
							"        \"userLoginEmail\"\r",
							"      ]\r",
							"    },\r",
							"    \"roles\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"roleId\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userRoleStatus\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"roleId\",\r",
							"            \"userRoleStatus\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"user\",\r",
							"    \"roles\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"if(pm.variables.get(\"schemaValidation\")===\"post\"){\r",
							"     pm.test(\"Response matches the schema\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(postvalidSchema);\r",
							"        });\r",
							"}\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Check if schemaValidation is \"yes\"\r",
							"    if (pm.variables.get(\"schemaValidation\") === \"yes\") {\r",
							"        pm.test(\"Response matches the schema\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getallSchema);\r",
							"        });\r",
							"    }\r",
							"    // Check if schemaValidation is \"byId\"\r",
							"    else if (pm.variables.get(\"schemaValidation\") === \"byId\") {\r",
							"        pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getidSchema);\r",
							"        });\r",
							"    }\r",
							"    else if (pm.variables.get(\"schemaValidation\") === \"byRole\") {\r",
							"        pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getuserbyroleSchema);\r",
							"        });\r",
							"    }\r",
							"    else if (pm.variables.get(\"schemaValidation\") === \"byBatchId\") {\r",
							"        pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getbybatchIdSchema);\r",
							"        });\r",
							"    }\r",
							"     else if (pm.variables.get(\"schemaValidation\") === \"byRollId\") {\r",
							"        pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getuserbyRollidSchema);\r",
							"        });\r",
							"    }\r",
							"}\r",
							" if(pm.response.code === 201) {\r",
							"\r",
							"     if(pm.variables.get(\"schemaValidation\") === \"byRollIdV2\"){\r",
							"         pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getuserbyrollidV2Schema);\r",
							"         });\r",
							"    \r",
							" }\r",
							" }\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "User(Put,Delete)",
			"item": []
		},
		{
			"name": "Logout/Cleanup",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"if(currentRequest){\r",
					"\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"  /*  let baseUrl;\r",
					"\r",
					"    if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
					"        baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
					"    } else {  \r",
					"        baseUrl = pm.environment.get(\"baseURL\");\r",
					"    }\r",
					"\r",
					"    const endpoint = variables.endpoint; \r",
					"\r",
					"    let fullURL = baseUrl + endpoint; \r",
					"\r",
					"    pm.request.url = fullURL;*/\r",
					"\r",
					"   if (variables.includeAuth.toLowerCase() === 'true') {\r",
					"        const token = pm.collectionVariables.get('authToken');  \r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    } else if(variables.includeAuth.toLowerCase() === 'invalid') {\r",
					"         const token = pm.variables.get('invalidToken');  \r",
					"         console.log(token);\r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    }else {\r",
					"       console.log(\"No Authorization header needed\"); \r",
					"    }\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    if(currentRequest.data.length > 0){\r",
					"       pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"    \r",
					"}\t\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    validateStatusLine: function(expectedStatusCode, expectedStatusMessage) {\r",
					"        pm.test(`Status code is ${expectedStatusCode}`, () => {\r",
					"            pm.response.to.have.status(expectedStatusCode);  \r",
					"        });\r",
					"        pm.test(`Status message is '${expectedStatusMessage}'`, () => {\r",
					"            pm.response.to.have.status(expectedStatusMessage);\r",
					"        });        \r",
					"    },\r",
					"\r",
					"    validateResponseHeader: function() {\r",
					"        pm.test(\"Response Header Content-Type is application/json\", function () {\r",
					"            pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseHasBody: function() {\r",
					"        pm.test(\"Verify Response has Body or not\", function(){\r",
					"            pm.response.to.be.withBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseBodyAsJson: function() {\r",
					"        pm.test(\"Verify Response Body as JSON\", function(){\r",
					"            pm.response.to.be.json;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseTime: function() {\r",
					"        pm.test(\"Response time is less than 500ms\", function () {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"        });\r",
					"    },\r",
					"    \r",
					"    validateResponseisArray: function() {\r",
					"        pm.test(\"Response is an array\", function () {\r",
					"            pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
					"        });\r",
					"    }\r",
					"}\r",
					"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
					"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
					"const scenario = pm.variables.get(\"scenario\");\r",
					"\r",
					"\r",
					"if ((pm.response.code === 200)||(pm.response.code ===201)) {\r",
					"\r",
					"\r",
					"\r",
					"commonTests.validateStatusLine(expectedStatusCode, expectedStatusMessage);\r",
					"commonTests.validateResponseHeader();\r",
					"commonTests.validateResponseHasBody();\r",
					"commonTests.validateResponseBodyAsJson();\r",
					"commonTests.validateResponseTime();\r",
					"//commonTests.validateResponseisArray();\r",
					"}\r",
					"else {\r",
					"    commonTests.validateStatusLine(expectedStatusCode, expectedStatusMessage);\r",
					"    commonTests.validateResponseTime();\r",
					"}\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "b5f0d6e5-8245-46c9-bfd5-3e67fa058c66",
			"value": "",
			"disabled": true
		},
		{
			"key": "Admin_rollid",
			"value": ""
		},
		{
			"key": "Staff_rollid",
			"value": ""
		},
		{
			"key": "Student_rollid",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "programId",
			"value": ""
		},
		{
			"key": "adminUserId",
			"value": ""
		},
		{
			"key": "staffUserId",
			"value": ""
		},
		{
			"key": "studentUserId",
			"value": ""
		}
	]
}