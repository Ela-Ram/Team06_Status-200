{
	"info": {
		"_postman_id": "8e06b9a4-2565-4949-9299-a9d9d23a5fec",
		"name": "Team 06_Status 200",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20373048"
	},
	"item": [
		{
			"name": "Login",
			"item": []
		},
		{
			"name": "Program",
			"item": []
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Login for Bearer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();  // Parse JSON response\r",
									"pm.collectionVariables.set(\"authToken\", response.token);  // Store token in collection variable\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{username}}\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/login",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Check if the response contains the batchId field\r",
									"    if (jsonData && jsonData.batchId && jsonData.batchName) {\r",
									"        // Set the batchId in the collection variable\r",
									"        pm.collectionVariables.set(\"BatchId\", jsonData.batchId);\r",
									"\r",
									"        // Set the batchname in the collection variable\r",
									"        pm.collectionVariables.set(\"BatchName\", jsonData.batchName);\r",
									"\r",
									"        console.log(\"Batch ID: \" + jsonData.batchId + \" Batch Name: \" + jsonData.batchName);\r",
									"    } else {\r",
									"        console.log(\"Batch ID/Batch Name not found in the response.\");\r",
									"    }\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let scenario = pm.variables.get(\"scenario\"); \r",
									"let endpoint = pm.variables.get(\"endpoint\");  \r",
									"let baseUrl = pm.environment.get(\"Base_URL\");\r",
									"\r",
									"if (scenario === \"get batch by batchId\") {\r",
									"    console.log(\"Endpoint is:\" + endpoint);\r",
									"    let batchId = pm.collectionVariables.get(\"BatchId\"); \r",
									"    \r",
									"    if (batchId) {\r",
									"        // Replace the placeholder {{BatchId}} dynamically\r",
									"        let fullUrl = `${baseUrl}${endpoint}`.replace(\"{{BatchId}}\", batchId);\r",
									"        pm.request.url = fullUrl;\r",
									"    } else {\r",
									"        console.log(\"❌ BatchId is not set. Request URL will be incorrect.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch By BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"\r",
									"    let url = pm.request.url.toString(); // Get request URL as a string\r",
									"    let parts = url.split('/'); // Split URL by \"/\"\r",
									"    let requestBatchName = parts.pop(); // Get the last part (batchname is at the end)\r",
									"\r",
									"    console.log(\"Extracted batchname:\", requestBatchName);\r",
									"\r",
									"    let responseBody = pm.response.json(); \r",
									"\r",
									"    pm.test(\"Response should contain the requested batchName\", function () {\r",
									"         pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"        // Check if any batch in the response matches the requested batch name\r",
									"        let found = responseBody.some(batch => batch.batchName === requestBatchName);\r",
									"        pm.expect(found, `Batch with name '${requestBatchName}' should exist in response`).to.be.true;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    let url = pm.request.url.toString(); // Get request URL as a string\r",
									"    let parts = url.split('/'); // Split URL by \"/\"\r",
									"    let requestProgramId = parts.pop(); // Get the last part (ProgramId)\r",
									"\r",
									"    console.log(\"Extracted ProgramId:\", requestProgramId);\r",
									"\r",
									"    let responseBody = pm.response.json(); \r",
									"\r",
									"    pm.test(\"Response should contain the requested programId\", function () {\r",
									"        pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"        // Check if any batch in the response matches the requested programId\r",
									"        let found = responseBody.some(batch => batch.programId.toString() === requestProgramId);\r",
									"        pm.expect(found, `Batch with programId '${requestProgramId}' should exist in response`).to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let scenario = pm.variables.get(\"scenario\"); \r",
									"let baseUrl = pm.environment.get(\"Base_URL\");\r",
									"let fullUrl = '';\r",
									"let batchId = pm.collectionVariables.get(\"BatchId\"); \r",
									"\r",
									"if (scenario != \"update batch with invalid batchId\") { \r",
									"    // Update BatchId from collection variable for PUT request\r",
									"    let endpoint = pm.variables.get(\"endpoint\");\r",
									"    console.log(\"Endpoint is:\" + endpoint);    \r",
									"    \r",
									"    if (batchId) {\r",
									"        // Replace the placeholder {{BatchId}} dynamically\r",
									"        fullUrl = `${baseUrl}${endpoint}`.replace(\"{{BatchId}}\", batchId);\r",
									"        pm.request.url = fullUrl;\r",
									"        console.log(\"full url for update is: \" + fullUrl);\r",
									"    } else {\r",
									"        console.log(\"❌ BatchId is not set. Request URL will be incorrect.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",  \r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\":\"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId Negative Scenarios",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// TODO : ProgramId and ProgramName should come from Program Module. Hardcoding them for time being \r",
							"pm.variables.set(\"ProgramId\", 16767);\r",
							"pm.variables.set(\"ProgramName\", \"IJava\");\r",
							"\r",
							"// Append BatchName with unique id.\r",
							"const uniqueId = Math.floor(Math.random() * 10000);\r",
							"let batchName = pm.variables.get(\"batchName\");\r",
							"\r",
							"// If batchname from external file is not empty, append the batchname with unique id.\r",
							"if (batchName && batchName != '')\r",
							"{\r",
							"    batchName = `${batchName}-${uniqueId}`;\r",
							"    pm.variables.set(\"batchName\",batchName);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const batchSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"batchId\": { \"type\": \"integer\" },\r",
							"    \"batchName\": { \"type\": \"string\" },\r",
							"    \"batchDescription\": { \"type\": [\"string\", \"null\"] },\r",
							"    \"batchStatus\": { \"type\": \"string\", \"enum\": [\"Active\", \"Inactive\"] },\r",
							"    \"batchNoOfClasses\": { \"type\": \"integer\", \"minimum\": 1 },\r",
							"    \"programId\": { \"type\": \"integer\" },\r",
							"    \"programName\": { \"type\": \"string\" }\r",
							"  },\r",
							"  \"required\": [\"batchName\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"const batchArraySchema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": { \"$ref\": \"#/definitions/batchSchema\" },\r",
							"  \"definitions\": {\r",
							"    \"batchSchema\": batchSchema\r",
							"  }\r",
							"};\r",
							"\r",
							"let scenario = pm.variables.get(\"scenario\");\r",
							"let testScenario = `${pm.info.requestName} - ${scenario}`;\r",
							"\r",
							"// Schema validation for single batch (Get by ID, Create Batch, Update Batch)\r",
							"let requestName = pm.info.requestName;\r",
							"if ((pm.response.code == 200 || pm.response.code == 201) && (requestName.includes('Get Batch By BatchId') || requestName.includes('Create Batch') || requestName.includes('Update Batch')))\r",
							"{  \r",
							"    // Perform schema validation for the response body\r",
							"    pm.test(`Schema validation ${testScenario}`, function () {\r",
							"        pm.response.to.have.jsonSchema(batchSchema);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Schema validation for multiple batches\r",
							"if (pm.response.code == 200 && (requestName.includes('Get All Batches') || requestName.includes('Get Batch By BatchName') || requestName.includes('Get Batch By ProgramId')))\r",
							"{  \r",
							"    // Perform schema validation for the response body\r",
							"    pm.test(`Schema validation for ${testScenario}`, function () {\r",
							"        pm.response.to.have.jsonSchema(batchArraySchema);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Data validation for successful POST and PUT\r",
							"if ((pm.response.code === 201 && requestName.includes('Create Batch')) \r",
							"|| (pm.response.code === 200 && requestName.includes('Update Batch'))) {\r",
							"\r",
							"    let responseBody = pm.response.json(); // Get API response  \r",
							"    let batchName = pm.variables.get(\"batchName\"); \r",
							"    let batchDescription = pm.variables.get(\"batchDescription\");\r",
							"    let batchStatus = pm.variables.get(\"batchStatus\");\r",
							"    let batchNoOfClasses = pm.variables.get(\"batchNoOfClasses\");\r",
							"\r",
							"    pm.test(`Response should match the request body for ${testScenario}`, function () {\r",
							"        pm.expect(responseBody).to.be.an(\"object\");\r",
							"        \r",
							"        pm.expect(responseBody.batchName).to.eql(batchName);\r",
							"        pm.expect(responseBody.batchDescription).to.eql(batchDescription);\r",
							"        pm.expect(responseBody.batchStatus).to.eql(batchStatus);\r",
							"        pm.expect(responseBody.batchNoOfClasses).to.eql(batchNoOfClasses);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200 && (requestName.includes('Get Batch By BatchId') \r",
							"    || requestName.includes('Update Batch'))) {\r",
							"\r",
							"    let url = pm.request.url.toString(); // Get request URL as a string\r",
							"    let parts = url.split('/'); // Split URL by \"/\"\r",
							"    let requestBatchId = parts.pop(); // Get the last part (batchId is at the end)\r",
							"\r",
							"    console.log(\"Extracted batchId:\", requestBatchId);\r",
							"\r",
							"    let responseBody = pm.response.json(); // Get response JSON\r",
							"\r",
							"    pm.test(`Response should contain the requested batchId for ${testScenario}`, function () {\r",
							"        pm.expect(responseBody).to.have.property(\"batchId\");\r",
							"        pm.expect(responseBody.batchId.toString()).to.eql(requestBatchId);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Class",
			"item": []
		},
		{
			"name": "User(Post,Get)",
			"item": [
				{
					"name": "Login for Bearer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();  // Parse JSON response\r",
									"pm.collectionVariables.set(\"authToken\", response.token);  // Store token in collection variable\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{username}}\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/login",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a User with Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Check if the response contains the userId field\r",
									"if (jsonData && jsonData.userId) {\r",
									"    // Set the userId in the collection variable\r",
									"    pm.collectionVariables.set(\"Admin_userId\", jsonData.userId);\r",
									"\r",
									"    console.log(\"User ID set in collection variable: \" + jsonData.userId);\r",
									"} else {\r",
									"    console.log(\"User ID not found in the response.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTQ4NjA0NywiZXhwIjoxNzQxNTE0ODQ3fQ.U-92SSulwMLEbuIZsbd1IInl9ql97PLc-MMpqVyni4MVVaEBca_KLND5REWT335xMsSPk6qwiBQsuX8tCNtPog",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userComments\": \"Active user with experience in IT\",\r\n    \"userEduPg\": \"MSc Computer Science\",\r\n    \"userEduUg\": \"BSc Information Technology\",\r\n    \"userFirstName\": \"John\",\r\n    \"userLastName\": \"Doe\",\r\n    \"userLinkedinUrl\": \"https://www.linkedin.com/in/johndoe\",\r\n    \"userLocation\": \"New York\",\r\n    \"userMiddleName\": \"Michael\",\r\n    \"userPhoneNumber\": \"+91 9986594210\",\r\n    \"userRoleMaps\": [\r\n        {\r\n            \"roleId\": \"R01\",\r\n            \"userRoleStatus\": \"Active\"\r\n        }\r\n    ],\r\n    \"userTimeZone\": \"EST\",\r\n    \"userVisaStatus\": \"H1B\",\r\n    \"userLogin\": {\r\n        \"loginStatus\": \"Active\",\r\n        \"userLoginEmail\": \"johndoe4@gmail.com\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/roleStatus",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve scenario and endpoint from JSON data\r",
									"let scenario = pm.variables.get(\"scenario1\");\r",
									"let endpoint = pm.variables.get(\"endpoint\");\r",
									"let user_userId = pm.collectionVariables.get(\"Admin_userId\"); \r",
									"\r",
									"\r",
									"  if (endpoint) {\r",
									"    pm.variables.set(\"endpoint\", endpoint);\r",
									"    \r",
									"}else{\r",
									"    console.log(\"no endpoint\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}{{endpoint}}",
							"host": [
								"{{Base_URL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTUzNTg2MywiZXhwIjoxNzQxNTY0NjYzfQ._mnLOluXlDL-z_GCdFcS7oIZkb7qBXp6EgPwhjQwagNdgswK1Xvf2-R-3kzrL75keb4vfQI1al7lCve8PcBvxA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/upcomingClasses/U34",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"upcomingClasses",
								"U34"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							"let getallSchema ={\r",
							"\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userFirstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userMiddleName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userPhoneNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLocation\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userTimeZone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLinkedinUrl\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduUg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduPg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userComments\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userVisaStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLoginEmail\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"userId\",\r",
							"        \"userFirstName\",\r",
							"        \"userLastName\",\r",
							"        \"userMiddleName\",\r",
							"        \"userPhoneNumber\",\r",
							"        \"userLocation\",\r",
							"        \"userTimeZone\",\r",
							"        \"userLinkedinUrl\",\r",
							"        \"userEduUg\",\r",
							"        \"userEduPg\",\r",
							"        \"userComments\",\r",
							"        \"userVisaStatus\",\r",
							"        \"userLoginEmail\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"let getidSchema={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"user\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userFirstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userMiddleName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userPhoneNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLocation\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userTimeZone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLinkedinUrl\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduUg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userEduPg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userComments\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userVisaStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userLoginEmail\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"userId\",\r",
							"        \"userFirstName\",\r",
							"        \"userLastName\",\r",
							"        \"userMiddleName\",\r",
							"        \"userPhoneNumber\",\r",
							"        \"userLocation\",\r",
							"        \"userTimeZone\",\r",
							"        \"userLinkedinUrl\",\r",
							"        \"userEduUg\",\r",
							"        \"userEduPg\",\r",
							"        \"userComments\",\r",
							"        \"userVisaStatus\",\r",
							"        \"userLoginEmail\"\r",
							"      ]\r",
							"    },\r",
							"    \"roles\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"roleId\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userRoleStatus\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"roleId\",\r",
							"            \"userRoleStatus\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"user\",\r",
							"    \"roles\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Check if schemaValidation is \"yes\"\r",
							"    if (pm.variables.get(\"schemaValidation\") === \"yes\") {\r",
							"        pm.test(\"Response matches the schema\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getallSchema);\r",
							"        });\r",
							"    } \r",
							"    // Check if schemaValidation is \"byId\"\r",
							"    else if (pm.variables.get(\"schemaValidation\") === \"byId\") {\r",
							"        pm.test(\"Response matches the schema for ID\", function () {\r",
							"            pm.expect(pm.response.json()).to.have.jsonSchema(getidSchema); // You can use a different schema for this case\r",
							"        });\r",
							"    }\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "User(Put,Delete)",
			"item": []
		},
		{
			"name": "Logout/Cleanup",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"if(currentRequest){\r",
					"\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"  /*  let baseUrl;\r",
					"\r",
					"    if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
					"        baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
					"    } else {  \r",
					"        baseUrl = pm.environment.get(\"Base_URL\");\r",
					"    }\r",
					"\r",
					"    const endpoint = variables.endpoint; \r",
					"\r",
					"    let fullURL = baseUrl + endpoint; \r",
					"\r",
					"    pm.request.url = fullURL;*/\r",
					"\r",
					"    if (variables.includeAuth.toLowerCase() === 'true') {\r",
					"        const token = pm.collectionVariables.get('authToken');  \r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    } else if(variables.includeAuth.toLowerCase() === 'invalid') {\r",
					"         const token = pm.variables.get('invalidToken');  \r",
					"         console.log(token);\r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"\r",
					"    }else {\r",
					"       console.log(\"No Authorization header needed\"); \r",
					"    }\r",
					"\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    if(currentRequest.data.length > 0){\r",
					"       pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\t\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    validateStatusLine: function(expectedStatusCode, expectedStatusMessage) {\r",
					"        pm.test(`Status code is ${expectedStatusCode}`, () => {\r",
					"            pm.response.to.have.status(expectedStatusCode);  \r",
					"        });\r",
					"        pm.test(`Status message is '${expectedStatusMessage}'`, () => {\r",
					"            pm.response.to.have.status(expectedStatusMessage);\r",
					"        });        \r",
					"    },\r",
					"\r",
					"    validateResponseHeader: function() {\r",
					"        pm.test(\"Response Header Content-Type is application/json\", function () {\r",
					"            pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseHasBody: function() {\r",
					"        pm.test(\"Verify Response has Body or not\", function(){\r",
					"            pm.response.to.be.withBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseBodyAsJson: function() {\r",
					"        pm.test(\"Verify Response Body as JSON\", function(){\r",
					"            pm.response.to.be.json;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    validateResponseTime: function() {\r",
					"        pm.test(\"Response time is less than 500ms\", function () {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"        });\r",
					"    },\r",
					"    \r",
					"\r",
					"    validateResponseisArray: function() {\r",
					"        pm.test(\"Response is an array\", function () {\r",
					"            pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
					"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
					"const scenario = pm.variables.get(\"scenario\");\r",
					"\r",
					"// Call common test functions\r",
					"\r",
					"if (pm.response.code === 200) {\r",
					"\r",
					"commonTests.validateStatusLine(expectedStatusCode, expectedStatusMessage);\r",
					"commonTests.validateResponseHeader();\r",
					"commonTests.validateResponseHasBody();\r",
					"commonTests.validateResponseBodyAsJson();\r",
					"commonTests.validateResponseTime();\r",
					"//commonTests.validateResponseisArray();\r",
					"}\r",
					"else {\r",
					"    commonTests.validateStatusLine(expectedStatusCode, expectedStatusMessage);\r",
					"    commonTests.validateResponseTime();\r",
					"}\r",
					"\r",
					"    \r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "Admin_userId",
			"value": "U34"
		},
		{
			"key": "BatchId",
			"value": ""
		},
		{
			"key": "BatchName",
			"value": ""
		}
	]
}