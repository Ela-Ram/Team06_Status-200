[
    {
        "requests": [
            {
                "name": "Login for Access Token",
                "data": [
                    {
                        "scenario": "Admin login with valid credentials",
                        "username": "sdetorganizer@gmail.com",
                        "password": "March@2025",
                        "endpoint": "/login",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin login with invalid login Id",
                        "username": "sdetgmail.com",
                        "password": "March@2025",
                        "endpoint": "/login",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin login with invalid password",
                        "username": "sdetorganizer@gmail.com",
                        "password": "Mach@2025",
                        "endpoint": "/login",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin login with no value in login Id",
                        "username": "",
                        "password": "March@2025",
                        "endpoint": "/login",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin login with no value in password field",
                        "username": "sdetorganizer@gmail.com",
                        "password": "",
                        "endpoint": "/login",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin login with invalid endpoint",
                        "username": "sdetorganizer@gmail.com",
                        "password": "March@2025",
                        "endpoint": "/logn",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "includeAuth": "true"
                    }
                ]
            },
            {
                "name": "Create Batch",
                "data": [
                    {
                        "scenario": "create batch1 with all fields",
                        "batchName": "Team6-Status200-1",
                        "batchDescription": "Team 6 Batch 1",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with mandatory fields",
                        "batchName": "Team6-Status200-2",
                        "batchDescription": "",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch without batchName",
                        "batchName": "",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with batchName starting with non-alphabet",
                        "batchName": "3Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with batchName containing special characters",
                        "batchName": "Team6$_Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with description starting with non-alphabet",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "6Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with description containing special characters",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team$_6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch without batch status",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with invalid batch status",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "AAA",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with no.of classes 0",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 0,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with no.of classes more than 2 digits",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 100,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with no.of classes negative number",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": -1,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with non-existing program id",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": 9999,
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with invalid program id",
                        "batchName": "Team6-Status200-3",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": -1,
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch with invalid endpoint",
                        "batchName": "Team6-Status200-4",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batchestest",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "create batch without Authorization",
                        "batchName": "Team6-Status200-5",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "create batch with invalid token",
                        "batchName": "Team6-Status200-5",
                        "batchDescription": "Team 6 Batch",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Get All Batches",
                "data": [
                    {
                        "scenario": "get all batches valid endpoint",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get all batches with search string",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches?searchString=Team6",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get all batches invalid endpoint",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/batches1",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get all batches empty endpoint",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get all batches with No Auth",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "get all batches with invalid Auth",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Get Batch By BatchId",
                "data": [
                    {
                        "scenario": "get batch by batchId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches/batchId/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by invalid batchId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batches/batchId/@{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by batchId invalid endpoint",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batchestest/batchId/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by batchId without Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/batchId/{{BatchId}}",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "get batch by batchId with invalid Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/batchId/{{BatchId}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Get Batch By BatchName",
                "data": [
                    {
                        "scenario": "get batch by batchName",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches/batchName/{{BatchName}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by invalid batchName",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batches/batchName/@{{BatchName}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by batchname invalid endpoint",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batchestest/batchName/{{BatchName}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by batchName without Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/batchName/{{BatchName}}",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "get batch by batchName invalid Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/batchName/{{BatchName}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Get Batch By ProgramId",
                "data": [
                    {
                        "scenario": "get batch by programId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches/program/{{programID}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by invalid programId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "endpoint": "/batches/program/@{{programID}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "get batch by programId without Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/program/{{programID}}",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "get batch by programId with invalid Authorization",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "endpoint": "/batches/program/{{programID}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Update Batch",
                "data": [
                    {
                        "scenario": "update batch all fields valid",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with empty batch name",
                        "batchName": "",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with batch name starting with non alphabet",
                        "batchName": "6Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with batch name containing special characters",
                        "batchName": "Team6$_Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with description starting with non-alphabet",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "6Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with description containing special characters",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6$$ batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with invalid batch status",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "null",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with empty batch status",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with no.of classes 0",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 0,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with no.of classes more than 2 digits",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 100,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with no.of classes negative number",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": -1,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with non-existing program id",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": 9999,
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with invalid program id",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": -1,
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch with invalid endpoint",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/batchestest/{{BatchId}}",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "update batch without Authorization",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "update batch with invalid Authorization",
                        "batchName": "Team6-Status200-Updated",
                        "batchDescription": "Team 6 batch description",
                        "batchStatus": "Active",
                        "batchNoOfClasses": 10,
                        "programId": "{{programID}}",
                        "programName": "{{ProgramName}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Delete Batch By BatchId Negative Scenarios",
                "data": [
                    {
                        "scenario": "delete batch with invalid batchId",
                        "endpoint": "/batches/@{{BatchId}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "delete batch with non-existing batchId",
                        "endpoint": "/batches/-1",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "delete batch with invalid endpoint",
                        "endpoint": "/batchestest/{{BatchId}}",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "expectedResponseCode": 404,
                        "expectedResponseMessage": "Not Found",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "delete batch without Authorization",
                        "endpoint": "/batches/{{BatchId}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "includeAuth": "false"
                    },
                    {
                        "scenario": "delete batch with invalid Authorization",
                        "endpoint": "/batches/{{BatchId}}",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "expectedResponseCode": 401,
                        "expectedResponseMessage": "Unauthorized",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Creating User with Role",
                "data": [
                    {
                        "scenario": "post Admin All Valid",
                        "scenario1": "post admin",
                        "userFirstName": "Baliceyab",
                        "userMiddleName": "Marie",
                        "userLastName": "sorry",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                         "userLoginEmail":"{{randomEmail}}",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "SanFrancisco",
                        "userTimeZone": "CST",
                        "userRoleStatus": "Active",
                        "roleId": "R01",
                        "userVisaStatus": "H1B",
                        "loginStatus": "Active",
                        "userEduUg": "BSc Computer Science",
                        "userEduPg": "MBA",
                        "userComments": "Passionate about tech and innovation",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "post"
                    },
                    {
                        "scenario": "post Staff All Valid",
                        "scenario1": "post staff",
                        "userFirstName": "Aliceb",
                        "userMiddleName": "Lorry",
                        "userLastName": "Smith",
                       "userPhoneNumber": "{{randomPhoneNumber}}",
                         "userLoginEmail":"{{randomEmail}}",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "SanFrancisco",
                        "userTimeZone": "CST",
                        "userRoleStatus": "Active",
                        "roleId": "R02",
                        "userVisaStatus": "H1B",
                        "loginStatus": "Active",
                        "userEduUg": "BSc Computer Science",
                        "userEduPg": "MBA",
                        "userComments": "Passionate about tech and innovation",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "post"
                    },
                    {
                        "scenario": "post Student All Valid",
                        "scenario1": "post student",
                        "userFirstName": "Robertyb",
                        "userMiddleName": "James",
                        "userLastName": "Brown",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                         "userLoginEmail":"{{randomEmail}}",
                        "userLinkedinUrl": "https://www.linkedin.com/in/robertbrown",
                        "userLocation": "London",
                        "userTimeZone": "CST",
                        "userRoleStatus": "Active",
                        "roleId": "R03",
                        "userVisaStatus": "NA",
                        "loginStatus": "Active",
                        "userEduUg": "BSc Software Engineering",
                        "userEduPg": "MSc AI & Data Science",
                        "userComments": "Expert in AI and Machine Learning",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "post"
                    },
                    {
                        "scenario": "post with role mandatory only",
                        "scenario1": "post mandatory",
                        "userComments": "",
                        "userEduPg": "",
                        "userEduUg": "",
                        "userFirstName": "Emma",
                        "userLastName": "Williams",
                        "userLinkedinUrl": "",
                        "userLocation": "",
                        "userMiddleName": "",
                        "userPhoneNumber": "+1 6178765435",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "H4-EAD",
                        "loginStatus": "",
                        "userLoginEmail": "",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty phone number",
                        "scenario1": " empty phone number",
                        "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "Alice",
                        "userLastName": "Smith",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "",
                        "roleId": "R02",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "PST",
                        "userVisaStatus": "Green Card",
                        "loginStatus": "Active",
                        "userLoginEmail": "{{randomEmail}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty firstname ",
                        "scenario1": "empty firstname",
                        "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "",
                        "userLastName": "Smith",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "+1 4157896543",
                        "roleId": "R01",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "Green Card",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "alice.smith278903@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty lastname ",
                        "scenario1": "empty lastname",
                        "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "Alice",
                        "userLastName": "",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "+1 4157896543",
                        "roleId": "R01",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "Green Card",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "alice.smith27893@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty time zone ",
                        "scenario1": "empty time zone",
                        "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "Alice",
                        "userLastName": "Wonderla",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                        "roleId": "R01",
                        "userRoleStatus": "Active",
                        "userTimeZone": "",
                        "userVisaStatus": "Green Card",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "{{randomEmail}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty visa status ",
                        "scenario1": "empty visa status",
                        "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "Alice",
                        "userLastName": "Wonderla",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                        "roleId": "R01",
                        "userRoleStatus": "Active",
                        "userTimeZone": "CST",
                        "userVisaStatus": "",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "{{randomEmail}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role empty email ",
                        "scenario1": "empty email",
                        "userComments": "Data Scientist",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Statistics",
                        "userFirstName": "Sophia",
                        "userLastName": "Martinez",
                        "userLinkedinUrl": "https://www.linkedin.com/in/sophiamartinez",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Isabella",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                        "roleId": "R02",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "H4",
                        "loginStatus": "Active",
                        "userLoginEmail": "",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid roleID",
                        "scenario1": "invalid roleID",
                        "userComments": "Software Engineer",
                        "userEduPg": "MSc Computer Science",
                        "userEduUg": "BSc Software Engineering",
                        "userFirstName": "Liam",
                        "userLastName": "Brown",
                        "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                        "userLocation": "Chicago",
                        "userMiddleName": "Alexander",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                        "roleId": "R&5",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "CST",
                        "userVisaStatus": "NA",
                        "loginStatus": "Active",
                        "userLoginEmail":"{{randomEmail}}",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid firstname",
                        "scenario1": "invalid firstname",
                        "userComments": "Software Engineer",
                        "userEduPg": "MSc Computer Science",
                        "userEduUg": "BSc Software Engineering",
                        "userFirstName": "Tam@6*",
                        "userLastName": "Brown",
                        "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                        "userLocation": "Chicago",
                        "userMiddleName": "Alexander",
                        "userPhoneNumber": "+1 3124567890",
                        "roleId": "R&5",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "CST",
                        "userVisaStatus": "NA",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "liam.brown91@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid lastname",
                        "scenario1": "invalid lastname",
                        "userComments": "Software Engineer",
                        "userEduPg": "MSc Computer Science",
                        "userEduUg": "BSc Software Engineering",
                        "userFirstName": "Tom",
                        "userLastName": "b59^&J",
                        "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                        "userLocation": "Chicago",
                        "userMiddleName": "Alexander",
                        "userPhoneNumber": "+1 3124567890",
                        "roleId": "R&5",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "CST",
                        "userVisaStatus": "NA",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "liam.brown91@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid time zone",
                        "scenario1": "invalid time zone",
                        "userComments": "Software Engineer",
                        "userEduPg": "MSc Computer Science",
                        "userEduUg": "BSc Software Engineering",
                        "userFirstName": "Tom",
                        "userLastName": "Brown",
                        "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                        "userLocation": "Chicago",
                        "userMiddleName": "Alexander",
                        "userPhoneNumber": "+1 3124567890",
                        "roleId": "R03",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "C4&",
                        "userVisaStatus": "NA",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "liam.brown91@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid visa status",
                        "scenario1": "invalid visa status",
                        "userComments": "Software Engineer",
                        "userEduPg": "MSc Computer Science",
                        "userEduUg": "BSc Software Engineering",
                        "userFirstName": "Tom",
                        "userLastName": "Brown",
                        "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                        "userLocation": "Chicago",
                        "userMiddleName": "Alexander",
                        "userPhoneNumber": "+1 3124567890",
                        "roleId": "R01",
                        "userRoleStatus": "Inactive",
                        "userTimeZone": "CST",
                        "userVisaStatus": "UY^yy",
                        "loginStatus": "Active",
                        "userLoginEmail": "liam.brown91@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid email",
                        "scenario1": "invalid email",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role existing email",
                        "scenario1": "existing email",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "saranya@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role existing phone number",
                        "scenario1": "existing phone number",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 3213123123",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role phone number more than 10 numbers",
                        "scenario1": "phone number more than 10 digits",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 213567890123",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role phone number less than 10 numbers",
                        "scenario1": "phone number less than 10 digits",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 21356789",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role phone number invalid value",
                        "scenario1": "phone number invalid value",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "+1 21ad901$56",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role phone number invalid format",
                        "scenario1": "phone number invalid format",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid Endpoint",
                        "scenario1": "wrong endpoint",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersroleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid Base URL",
                        "scenario1": "invalidBaseURL",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "invalidBase_URL": "https://lms-hackthon-feb25-803334cfbe.herokuapp.com/lms",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid BaseURL with /",
                        "scenario1": "invalidBaseURL",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "invalidBase_URL": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role no auth",
                        "scenario1": "post no auth",
                        "userComments": "Network Engineer",
                        "userEduPg": "MSc Networking & Security",
                        "userEduUg": "BSc Electrical Engineering",
                        "userFirstName": "Olivia",
                        "userLastName": "Clark",
                        "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                        "userLocation": "Los Angeles",
                        "userMiddleName": "Emily",
                        "userPhoneNumber": "2135678901",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "userTimeZone": "PST",
                        "userVisaStatus": "US-Citizen",
                        "loginStatus": "Active",
                        "userLoginEmail": "olivia.clark55@gmail.com",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "post with role invalid auth",
                        "scenario1": "post invalid auth",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roleStatus",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Get All Users",
                "data": [
                    {
                        "scenario": "get all users valid endpoint",
                        "scenario1": "get all users",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all users invalid endpoint",
                        "scenario1": "get all users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all users empty endpoint",
                        "scenario1": "get all users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all users with No Auth",
                        "scenario1": "get all users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users",
                        "includeAuth": "false",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all users with invalid Auth",
                        "scenario1": "get all users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all active users valid endpoint",
                        "scenario1": "get all active users",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/activeUsers",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all active users with invalid endpoint",
                        "scenario1": "get all active users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all active users with empty endpoint",
                        "scenario1": "get all active users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all active users with no auth",
                        "scenario1": "get all active users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/activeUsers",
                        "includeAuth": "false",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get all active users with invalid auth",
                        "scenario1": "get all active users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/activeUsers",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "yes"
                    },
                    {
                        "scenario": "get emails of all active users valid endpoint",
                        "scenario1": "get email all active users",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/fetch-emails",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get emails of all active users invalid endpoint",
                        "scenario1": "get email all active users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get emails of all active users empty endpoint",
                        "scenario1": "get email all active users",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get emails of all active users with no auth",
                        "scenario1": "get email all active users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/activeUsers",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get emails of all active users with invalid auth",
                        "scenario1": "get email all active users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/fetch-emails",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all roles with valid endpoint",
                        "scenario1": "get all roles",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/roles",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all roles with invalid endpoint",
                        "scenario1": "get all roles",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all roles with empty endpoint",
                        "scenario1": "get all roles",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all roles with no auth",
                        "scenario1": "get all roles",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/roles",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all roles invalid auth",
                        "scenario1": "get all roles",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/roles",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all user with roles with valid endpoint",
                        "scenario1": "get all user with roles",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roles",
                        "includeAuth": "true",
                        "schemaValidation": "byRole"
                    },
                    {
                        "scenario": "get all user with roles with invalid endpoint",
                        "scenario1": "get all user with roles",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all user with roles with empty endpoint",
                        "scenario1": "get all user with roles",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all user with roles with no auth",
                        "scenario1": "get all user with roles",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roles",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get all user with roles invalid auth",
                        "scenario1": "get all user with roles",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roles",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Users by roleId V2 valid endpoint",
                        "scenario1": "get Users by roleId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/v2/users",
                        "includeAuth": "true",
                        "schemaValidation": "byRollIdV2"
                    },
                    {
                        "scenario": "get Users by roleId V2 invalid endpoint",
                        "scenario1": "get Users by roleId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/usersss",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Users by roleId V2 empty endpoint",
                        "scenario1": "get Users by roleId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Users by roleId V2 with No Auth",
                        "scenario1": "get Users by roleId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/v2/users",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Users by roleId V2 invalid Auth",
                        "scenario1": "get Users by roleId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/v2/users",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Get Count of Active/Inactive Users",
                "data": [
                    {
                        "scenario": "get Count Active/InActive Users valid",
                        "scenario1": "get Count Active/InActive Users",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter all",
                        "scenario1": "by all",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/byStatus",
                        "idValue": "all",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter Admin rollId",
                        "scenario1": "by Admin rollId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter Staff rollId",
                        "scenario1": "by Staff rollId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter Student rollId",
                        "scenario1": "by Student rollId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter invalid Admin rollId",
                        "scenario1": "by Admin invalid rollId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/byStatus",
                        "idValue": "R4#",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter invalid Staff rollId",
                        "scenario1": "by Staff invalid rollId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/byStatus",
                        "idValue": "34ty",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with parameter invalid Student rollId",
                        "scenario1": "by Student invalid rollId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/byStatus",
                        "idValue": "12dr",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with no auth",
                        "scenario1": "get Count Active/InActive Users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get Count Active/InActive Users with invalid auth",
                        "scenario1": "get Count Active/InActive Users",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/byStatus",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Get User by UserId",
                "data": [
                    {
                        "scenario": "get user by Admin Userid valid",
                        "scenario1": "by Admin usersid",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "roleId": "R01",
                        "endpoint": "/users",
                        "includeAuth": "true",
                        "schemaValidation": "byId"
                    },
                    {
                        "scenario": "get user by Staff Userid valid",
                        "scenario1": "by usersid",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "roleId": "R02",
                        "endpoint": "/users",
                        "includeAuth": "true",
                        "schemaValidation": "byId"
                    },
                    {
                        "scenario": "get user by Student Userid valid",
                        "scenario1": "by usersid",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "roleId": "R03",
                        "endpoint": "/users",
                        "includeAuth": "true",
                        "schemaValidation": "byId"
                    },
                    {
                        "scenario": "get user by Userid with invalid numbers",
                        "scenario1": "usersid with numbers",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/748784447457",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get user by Userid with invalid alphabets",
                        "scenario1": "usersid with alphabets",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/hgser",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get user by Userid with special characters",
                        "scenario1": "usersid with special characters",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/U3$&",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get user by Userid with No Auth",
                        "scenario1": "by usersid",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get user by Userid with invalid Auth",
                        "scenario1": "by usersid",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Get User by BatchId",
                "data": [
                    {
                        "scenario": "get User by Progaram Batches with BatchId valid",
                        "scenario1": "by batchId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/programBatch/{{BatchId}}",
                        "includeAuth": "true",
                        "schemaValidation": "byBatchId"
                    },
                    {
                        "scenario": "get User by Progaram Batches by BatchId invalid numbers",
                        "scenario1": "batchId with numbers",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programBatch/88877999998888",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get User by Progaram Batches by BatchId invalid alphabets",
                        "scenario1": "batchId with alphabets",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programBatch/AHHbbsdjsbd",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get User by Progaram Batches by BatchId with special characters",
                        "scenario1": "batchId with special characters",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programBatch/&#@^&7",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get User by Progaram Batches by BatchId with No Auth",
                        "scenario1": "by batchId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/programBatch/{{BatchId}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get User by Progaram Batches by BatchId with invalid Auth",
                        "scenario1": "by batchId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/programBatch/{{BatchId}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                  ]
                },
                {
                    "name": "Get User by programID",
                    "data": [
                    {
                        "scenario": "get the User for Progaram with ProgramId valid",
                        "scenario1": "by ProgramId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/programs/{{programID}}",
                        "includeAuth": "true",
                        "schemaValidation": "byBatchId"
                    },
                    {
                        "scenario": "get the User for Progaram with ProgramId invalid numbers",
                        "scenario1": "ProgramId with numbers",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programs/586797690856",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User for Progaram with ProgramId invalid alphabets",
                        "scenario1": "ProgramId with alphabets",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programs/3456712",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User for Progaram with ProgramId with special characters",
                        "scenario1": "ProgramId with special characters",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/programs/547$$$",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User for Progaram with ProgramId with No Auth",
                        "scenario1": "by ProgramId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/programs/{{programID}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User for Progaram with ProgramId with invalid Auth",
                        "scenario1": "by ProgramId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/programs/{{programID}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                  ]
                },
                {
                    "name": "Get User by RoleId",
                    "data": [
                    
                    {
                        "scenario": "get the User with Admin roleId valid",
                        "scenario1": "by Admin RoleId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roles/{{adminRoleId}}",
                        "includeAuth": "true",
                        "schemaValidation": "byRollId"
                    },
                    {
                        "scenario": "get the User with Staff roleId valid",
                        "scenario1": "by Staff RoleId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roles/{{studentRoleId}}",
                        "includeAuth": "true",
                        "schemaValidation": "byRollId"
                    },
                    {
                        "scenario": "get the User with Student roleId valid",
                        "scenario1": "by Student RoleId",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roles/{{studentRoleId}}",
                        "includeAuth": "true",
                        "schemaValidation": "byRollId"
                    },
                    {
                        "scenario": "get the User with roleId invalid numbers",
                        "scenario1": "by RoleId ",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/roles/87866",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User with roleId invalid alphabets",
                        "scenario1": "by RoleId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/roles/khugy",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User with roleId with special characters",
                        "scenario1": "by RoleId",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/roles/R&1",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User with roleId with No Auth",
                        "scenario1": "by RoleId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roles/{{adminRoleId}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "get the User with roleId with invalid Auth",
                        "scenario1": "by RoleId",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roles/{{adminRoleId}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Update User with UserID",
                "data": [
                    {
                        "scenario": "Update user Information with UserID valid",
                        "scenario1": "valid userId",
                        "userId": "{{Created_userId}}",
                        "userFirstName": "UpdatedJohn",
                        "userLastName": "Doe",
                        "userMiddleName": "Michael",
                        "userPhoneNumber": "{{randomPhoneNumber}}",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "userVisaStatus": "GC-EAD",
                        "userLoginEmail": "alice886.smith@gmail.com",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "putbyuserId"
                    },
                    {
                        "scenario": "Update user Information with UserID non existing",
                        "scenario1": "non existing userId",
                        "userId": "U00",
                        "userFirstName": "John",
                        "userLastName": "Doe",
                        "userMiddleName": "Michael",
                        "userPhoneNumber": "+91 9443026205",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "userVisaStatus": "GC-EAD",
                        "userLoginEmail": "john5.doe99@gmail.com",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/U00",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update user Information with UserID with Invalid fields",
                        "scenario1": "userId with invalid fields",
                        "userId": "{{Created_userId}}",
                        "userFirstName": "Updated John100",
                        "userMiddleName": "Michael njdn&&",
                        "userLastName": "Doe",
                        "userPhoneNumber": "9443026999",
                        "userLoginEmail": "john95.doe99@gmail.com",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userVisaStatus": "GC-EAD",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update user Information with UserID with no auth",
                        "scenario1": "valid userId",
                        "userId": "{{Created_userId}}",
                        "userFirstName": "Updated John",
                        "userMiddleName": "Michael",
                        "userLastName": "Doe",
                        "userPhoneNumber": "+91 9443026999",
                        "userLoginEmail": "john100.doe99@gmail.com",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userVisaStatus": "GC-EAD",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/{{Created_userId}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update user Information with UserID with invalid auth",
                        "scenario1": "valid userId",
                        "userId": "{{Created_userId}}",
                        "userFirstName": "Updated John",
                        "userMiddleName": "Michael",
                        "userLastName": "Doe",
                        "userPhoneNumber": "+91 9443026999",
                        "userLoginEmail": "john100.doe99@gmail.com",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userVisaStatus": "GC-EAD",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/{{Created_userId}}",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update user Information with UserID with invalid endpoint",
                        "scenario1": "update invalid endpoint",
                        "userId": "{{Created_userId}}",
                        "userFirstName": "Updated John",
                        "userMiddleName": "Michael",
                        "userLastName": "Doe",
                        "userPhoneNumber": "+91 9443026999",
                        "userLoginEmail": "john100.doe99@gmail.com",
                        "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userLocation": "NewYork",
                        "userTimeZone": "EST",
                        "userVisaStatus": "GC-EAD",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/useuybs/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Update User RoleID",
                "data": [
                    {
                        "scenario": "Update RoleID with valid data",
                        "scenario1": "with RoleId",
                        "roleId": "R02",
                        "userRoleStatus": "Active",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roleId/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no",
                        "skipTest": "true"
                    },
                    {
                        "scenario": "Update with invalid rollId",
                        "scenario1": "with RoleId",
                        "roleId": "R$U7",
                        "userRoleStatus": "Active",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleId/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update RoleID with invalid userId",
                        "scenario1": "with RoleId",
                        "roleId": "R03",
                        "userRoleStatus": "Active",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/roleId/hyij^^",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update RoleID with invalid endpoint",
                        "scenario1": "with RoleId",
                        "roleId": "R02",
                        "userRoleStatus": "Active",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/ro78d/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update RoleID with no auth",
                        "scenario1": "with RoleId",
                        "roleId": "R02",
                        "userRoleStatus": "Active",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roleId/{{Created_userId}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Update User Role Program Batch Status",
                "data": [
                    {
                        "scenario": "Update User Role program batch status",
                        "scenario1": "all valid",
                        "userId": "{{Created_userId}}",
                        "roleId": "R02",
                        "programId": "{{programID}}",
                        "batchId": "{{BatchId}}",
                        "userRoleProgramBatchStatus": "Active",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/roleProgramBatchStatus/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no",
                        "skipTest": "true"
                    },
                    {
                        "scenario": "Update User Role program batch status",
                        "scenario1": "invalid user id",
                        "userId": "{{Created_userId}}",
                        "roleId": "R02",
                        "programId": "{{programID}}",
                        "batchId": "{{BatchId}}",
                        "userRoleProgramBatchStatus": "Active",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/roleProgramBatchStatus/U6P}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Role program batch status",
                        "scenario1": "empty program id",
                        "userId": "{{Created_userId}}",
                        "roleId": "R02",
                        "programId": "",
                        "batchId": "{{BatchId}}",
                        "userRoleProgramBatchStatus": "Active",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/roleProgramBatchStatus/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Role program batch status",
                        "scenario1": "empty program id",
                        "userId": "{{Created_userId}}",
                        "roleId": "R02",
                        "programId": "",
                        "batchId": "{{BatchId}}",
                        "userRoleProgramBatchStatus": "Active",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/roleProgramBatchStatus/{{Created_userId}}",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Update User Login Status",
                "data": [
                    {
                        "scenario": "Update User Login Status all valid",
                        "scenario1": "all valid",
                        "userLoginEmail": "{{randomEmail}}",
                        "loginStatus": "Active",
                        "status": "Active",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/userLogin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no",
                        "skipTest": "true"
                    },
                    {
                        "scenario": "Update User Login Status empty email",
                        "scenario1": "empty email",
                        "userLoginEmail": "",
                        "loginStatus": "active",
                        "status": "active",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/userLogin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status empty login status",
                        "scenario1": "empty loginstatus",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "",
                        "status": "active",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/userLogin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status empty status",
                        "scenario1": "empty status",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "active",
                        "status": "",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/userLogin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status invalid login status",
                        "scenario1": "invalid loginstatus",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "12bdhb**6",
                        "status": "active",
                        "expectedStatusCode": 400,
                        "expectedStatusMessage": "Bad Request",
                        "endpoint": "/users/userLogin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status invalid userid",
                        "scenario1": "invalid userId",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "active",
                        "status": "active",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/userLogin/uk890",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status invalid endpoint",
                        "scenario1": "invalid endpoint",
                        "userLoginEmail": "abcdefgh999@gmail.com",
                        "loginStatus": "active",
                        "status": "active",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/usegin/{{Created_userId}}",
                        "includeAuth": "true",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status no auth",
                        "scenario1": "no auth",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "active",
                        "status": "active",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/userLogin/uk890",
                        "includeAuth": "false",
                        "schemaValidation": "no"
                    },
                    {
                        "scenario": "Update User Login Status invalid auth",
                        "scenario1": "invalid authorization",
                        "userLoginEmail": "abbj67@gmail.com",
                        "loginStatus": "active",
                        "status": "active",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/userLogin/uk890",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345",
                        "schemaValidation": "no"
                    }
                ]
            },
            {
                "name": "Delete a User",
                "data": [
                    {
                        "scenario1": "Delete valid",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/users/{{Created_userId}}",
                        "includeAuth": "true",
                        "skipTest": "true"
                    },
                    {
                        "scenario1": "Delete invalid userid",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/98**l",
                        "includeAuth": "true"
                    },
                    {
                        "scenario1": "Delete no auth",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/98**l",
                        "includeAuth": "false"
                    },
                    {
                        "scenario1": "Delete invalid auth",
                        "expectedStatusCode": 401,
                        "expectedStatusMessage": "Unauthorized",
                        "endpoint": "/users/98**l",
                        "includeAuth": "invalid",
                        "invalidToken": "Invalid_Token_Value_12345"
                    }
                ]
            },
            {
                "name": "Delete Batch",
                "data": [
                    {
                        "scenario": "Delete a batch - valid",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "endpoint": "/batches/{{BatchId}}",
                        "includeAuth": "true"
                    }
                ]
            },
            {
                "name": "Cleanup ",
                "data": [
                    {
                        "scenario1": "cleanup",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "endpoint": "/users/{{adminUserId}}",
                        "includeAuth": "true",
                        "skipTest": "true"
                    }
                ]
            },
            {
                "name": "Logout",
                "data": [
                    {
                        "scenario": "Admin logout with valid baseurl",
                        "Base_URL": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms",
                        "endpoint": "/logoutlms",
                        "expectedStatusCode": 200,
                        "expectedStatusMessage": "OK",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "Admin logout with invalid endpoint",
                        "Base_URL": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms",
                        "endpoint": "/logtlms",
                        "expectedStatusCode": 404,
                        "expectedStatusMessage": "Not Found",
                        "includeAuth": "true"
                    },
                    {
                        "scenario": "no authorization",
                        "endpoint": "/logtlms",
                        "expectedStatusCode": 401,
                        "accessToken": "abc",
                        "expectedStatusMessage": "Unauthorized",
                        "includeAuth": "false"
                    }
                ]
            },
            {

                "name": "Creating User with Role",
                "data": [
                    {
                        "scenario": "post Admin All Valid",
                        "scenario1": "post admin",
                    
                        "userFirstName": "Baliceyad",
                        "userMiddleName": "Marie",
                        "userLastName": "sorry",
                        "userPhoneNumber": "+1 5197891789",
                        "userLoginEmail": "alice555.smith@gmail.com",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "SanFrancisco",
                        "userTimeZone": "CST",
                        "userRoleStatus": "Active",
                        "roleId": "R01",
                        "userVisaStatus": "H1B",
                        "loginStatus": "Active",
                        "userEduUg": "BSc Computer Science",
                        "userEduPg": "MBA",
                        "userComments": "Passionate about tech and innovation",                
                       "expectedStatusCode": 201,
                       "expectedStatusMessage": "Created",
                       "endpoint": "/users/roleStatus",
                      "includeAuth": "true",
                      "schemaValidation": "post"
                  },
                  {
                    "scenario": "post Staff All Valid",
                    "scenario1": "post staff",
                  "userFirstName": "Aliceb",
                "userMiddleName": "Lorry",
                "userLastName": "Smith",
                "userPhoneNumber": "+1 4157891555",
                "userLoginEmail": "alice787.smith@gmail.com",
                "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                "userLocation": "SanFrancisco",
                "userTimeZone": "CST",
                "userRoleStatus": "Active",
                "roleId": "R02",
                "userVisaStatus": "H1B",
                "loginStatus": "Active",
                "userEduUg": "BSc Computer Science",
                "userEduPg": "MBA",
                "userComments": "Passionate about tech and innovation",
                   "expectedStatusCode": 201,
                   "expectedStatusMessage": "Created",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "post"
                  },
                  {
                    "scenario": "post Student All Valid",
                    "scenario1": "post student",
                  "userFirstName": "Robertyb",
                "userMiddleName": "James",
                "userLastName": "Brown",
                "userPhoneNumber": "+1 7700900899",
                "userLoginEmail": "robert855.browny@gmail.com",
                "userLinkedinUrl": "https://www.linkedin.com/in/robertbrown",
                "userLocation": "London",
                "userTimeZone": "CST",
                "userRoleStatus": "Active",
                "roleId": "R03",
                "userVisaStatus": "NA",
                "loginStatus": "Active",
                "userEduUg": "BSc Software Engineering",
                "userEduPg": "MSc AI & Data Science",
                "userComments": "Expert in AI and Machine Learning",
                   "expectedStatusCode": 201,
                   "expectedStatusMessage": "Created",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "post"
                  },
        
                           {
                    "scenario": "post with role mandatory only",
                    "scenario1": "post mandatory",
                   "userComments": "",
                      "userEduPg": "",
                      "userEduUg": "",
                      "userFirstName": "Emma",
                      "userLastName": "Williams",
                      "userLinkedinUrl": "",
                      "userLocation": "",
                      "userMiddleName": "",
                      "userPhoneNumber": "+1 6178765435",
                      "roleId": "R03",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "H4-EAD",
                      "loginStatus": "",
                      "userLoginEmail": "",
                   "expectedStatusCode": 201,
                   "expectedStatusMessage": "Created",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  
        
                  {
                    "scenario": "post with role empty phone number",
                    "scenario1": " empty phone number",
                   "userComments": "software engineer",
                      "userEduPg": "MSc Data Science",
                      "userEduUg": "BSc Computer Engineering",
                      "userFirstName": "Alice",
                      "userLastName": "Smith",
                      "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                      "userLocation": "San Francisco",
                      "userMiddleName": "Marie",
                      "userPhoneNumber": "",
                      "roleId": "R02",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "PST",
                      "userVisaStatus": "Green Card",
                      "loginStatus": "Active",
                      "userLoginEmail": "alice.smith23@gmail.com",
                   "expectedStatusCode": 400,
                   "expectedStatusMessage": "Bad Request",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  
                  
                  
                  {
                    "scenario": "post with role empty firstname ",
                    "scenario1": "empty firstname",
                   "userComments": "software engineer",
                      "userEduPg": "MSc Data Science",
                      "userEduUg": "BSc Computer Engineering",
                      "userFirstName": "",
                      "userLastName": "Smith",
                      "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                      "userLocation": "San Francisco",
                      "userMiddleName": "Marie",
                      "userPhoneNumber": "+1 4157896543",
                      "roleId": "R01",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "Green Card",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "alice.smith23@gmail.com",
                   "expectedStatusCode": 400,
                   "expectedStatusMessage": "Bad Request",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role empty lastname ",
                    "scenario1": "empty lastname",
                   "userComments": "software engineer",
                      "userEduPg": "MSc Data Science",
                      "userEduUg": "BSc Computer Engineering",
                      "userFirstName": "Alice",
                      "userLastName": "",
                      "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                      "userLocation": "San Francisco",
                      "userMiddleName": "Marie",
                      "userPhoneNumber": "+1 4157896543",
                      "roleId": "R01",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "Green Card",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "alice.smith23@gmail.com",
                   "expectedStatusCode": 400,
                   "expectedStatusMessage": "Bad Request",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role empty time zone ",
                    "scenario1": "empty time zone",
                   "userComments": "software engineer",
                      "userEduPg": "MSc Data Science",
                      "userEduUg": "BSc Computer Engineering",
                      "userFirstName": "Alice",
                      "userLastName": "Wonderla",
                      "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                      "userLocation": "San Francisco",
                      "userMiddleName": "Marie",
                      "userPhoneNumber": "+1 4157896543",
                      "roleId": "R01",
                      "userRoleStatus": "Active",
                      "userTimeZone": "",
                      "userVisaStatus": "Green Card",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "alice.smith23@gmail.com",
                   "expectedStatusCode": 400,
                   "expectedStatusMessage": "Bad Request",
                   "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                    {
                      "scenario": "post with role empty visa status ",
                      "scenario1": "empty visa status",
                    "userComments": "software engineer",
                        "userEduPg": "MSc Data Science",
                        "userEduUg": "BSc Computer Engineering",
                        "userFirstName": "Alice",
                        "userLastName": "Wonderla",
                        "userLinkedinUrl": "https://www.linkedin.com/in/alicesmith",
                        "userLocation": "San Francisco",
                        "userMiddleName": "Marie",
                        "userPhoneNumber": "+1 4157896543",
                        "roleId": "R01",
                        "userRoleStatus": "Active",
                        "userTimeZone": "CST",
                        "userVisaStatus": "",
                        "loginStatus": "Inactive",
                        "userLoginEmail": "alice.smith23@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role empty email ",
                      "scenario1": "empty email",
                    "userComments": "Data Scientist",
                      "userEduPg": "MSc Data Science",
                      "userEduUg": "BSc Statistics",
                      "userFirstName": "Sophia",
                      "userLastName": "Martinez",
                      "userLinkedinUrl": "https://www.linkedin.com/in/sophiamartinez",
                      "userLocation": "San Francisco",
                      "userMiddleName": "Isabella",
                      "userPhoneNumber": "+1 4158765432",
                      "roleId": "R02",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "H4",
                      "loginStatus": "Active",
                      "userLoginEmail": "",
                    "expectedStatusCode": 201,
                    "expectedStatusMessage": "Created",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid roleID",
                      "scenario1": "invalid roleID",
                      "userComments": "Software Engineer",
                      "userEduPg": "MSc Computer Science",
                      "userEduUg": "BSc Software Engineering",
                      "userFirstName": "Liam",
                      "userLastName": "Brown",
                      "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                      "userLocation": "Chicago",
                      "userMiddleName": "Alexander",
                      "userPhoneNumber": "+1 3124567890",
                      "roleId": "R&5",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "CST",
                      "userVisaStatus": "NA",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "liam.brown91@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid firstname",
                      "scenario1": "invalid firstname",
                      "userComments": "Software Engineer",
                      "userEduPg": "MSc Computer Science",
                      "userEduUg": "BSc Software Engineering",
                      "userFirstName": "Tam@6*",
                      "userLastName": "Brown",
                      "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                      "userLocation": "Chicago",
                      "userMiddleName": "Alexander",
                      "userPhoneNumber": "+1 3124567890",
                      "roleId": "R&5",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "CST",
                      "userVisaStatus": "NA",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "liam.brown91@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid lastname",
                      "scenario1": "invalid lastname",
                      "userComments": "Software Engineer",
                      "userEduPg": "MSc Computer Science",
                      "userEduUg": "BSc Software Engineering",
                      "userFirstName": "Tom",
                      "userLastName": "b59^&J",
                      "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                      "userLocation": "Chicago",
                      "userMiddleName": "Alexander",
                      "userPhoneNumber": "+1 3124567890",
                      "roleId": "R&5",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "CST",
                      "userVisaStatus": "NA",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "liam.brown91@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid time zone",
                      "scenario1": "invalid time zone",
                      "userComments": "Software Engineer",
                      "userEduPg": "MSc Computer Science",
                      "userEduUg": "BSc Software Engineering",
                      "userFirstName": "Tom",
                      "userLastName": "Brown",
                      "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                      "userLocation": "Chicago",
                      "userMiddleName": "Alexander",
                      "userPhoneNumber": "+1 3124567890",
                      "roleId": "R&5",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "C4&",
                      "userVisaStatus": "NA",
                      "loginStatus": "Inactive",
                      "userLoginEmail": "liam.brown91@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid visa status",
                      "scenario1": "invalid visa status",
                      "userComments": "Software Engineer",
                      "userEduPg": "MSc Computer Science",
                      "userEduUg": "BSc Software Engineering",
                      "userFirstName": "Tom",
                      "userLastName": "Brown",
                      "userLinkedinUrl": "https://www.linkedin.com/in/liambrown",
                      "userLocation": "Chicago",
                      "userMiddleName": "Alexander",
                      "userPhoneNumber": "+1 3124567890",
                      "roleId": "R01",
                      "userRoleStatus": "Inactive",
                      "userTimeZone": "CST",
                      "userVisaStatus": "UY^yy",
                      "loginStatus": "Active",
                      "userLoginEmail": "liam.brown91@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role invalid email",
                      "scenario1": "invalid email",
                     "userComments": "Network Engineer",
                      "userEduPg": "MSc Networking & Security",
                      "userEduUg": "BSc Electrical Engineering",
                      "userFirstName": "Olivia",
                      "userLastName": "Clark",
                      "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                      "userLocation": "Los Angeles",
                      "userMiddleName": "Emily",
                      "userPhoneNumber": "+1 2135678901",
                      "roleId": "R03",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "US-Citizen",
                      "loginStatus": "Active",
                      "userLoginEmail": "olivia.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",

                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role existing email",
                      "scenario1": "existing email",
                     "userComments": "Network Engineer",
                      "userEduPg": "MSc Networking & Security",
                      "userEduUg": "BSc Electrical Engineering",
                      "userFirstName": "Olivia",
                      "userLastName": "Clark",
                      "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                      "userLocation": "Los Angeles",
                      "userMiddleName": "Emily",
                      "userPhoneNumber": "+1 2135678901",
                      "roleId": "R03",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "US-Citizen",
                      "loginStatus": "Active",
                      "userLoginEmail": "saranya@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    {
                      "scenario": "post with role existing phone number",
                      "scenario1": "existing phone number",
                     "userComments": "Network Engineer",
                      "userEduPg": "MSc Networking & Security",
                      "userEduUg": "BSc Electrical Engineering",
                      "userFirstName": "Olivia",
                      "userLastName": "Clark",
                      "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                      "userLocation": "Los Angeles",
                      "userMiddleName": "Emily",
                      "userPhoneNumber": "+1 3213123123",
                      "roleId": "R03",
                      "userRoleStatus": "Active",
                      "userTimeZone": "PST",
                      "userVisaStatus": "US-Citizen",
                      "loginStatus": "Active",
                      "userLoginEmail": "olivia.clark55@gmail.com",
                    "expectedStatusCode": 400,
                    "expectedStatusMessage": "Bad Request",
                    "endpoint": "/users/roleStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                    },
                    
                  
        
                  {
                    "scenario": "post with role phone number more than 10 numbers",
                    "scenario1": "phone number more than 10 digits",
                   "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "+1 213567890123",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 400,
                  "expectedStatusMessage": "Bad Request",
                  "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role phone number less than 10 numbers",
                    "scenario1": "phone number less than 10 digits",
                   "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "+1 21356789",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 400,
                  "expectedStatusMessage": "Bad Request",
                  "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role phone number invalid value",
                    "scenario1": "phone number invalid value",
                   "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "+1 21ad901$56",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 400,
                  "expectedStatusMessage": "Bad Request",
                  "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role phone number invalid format",
                    "scenario1": "phone number invalid format",
                   "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "2135678901",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 400,
                  "expectedStatusMessage": "Bad Request",
                  "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  
                 
                  {
                    "scenario": "post with role invalid Endpoint",
                    "scenario1": "wrong endpoint",
                    "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "2135678901",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 404,
                  "expectedStatusMessage": "Not Found",
                  "endpoint":"/usersroleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role invalid Base URL",
                    "scenario1": "invalidBaseURL",
                    "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "2135678901",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "invalidBase_URL":"https://lms-hackthon-feb25-803334cfbe.herokuapp.com/lms",
                     "endpoint": "/users/roleStatus",
                     "includeAuth": "true",
                     "schemaValidation": "no"
                  },
                  {
                    "scenario": "post with role invalid BaseURL with /",
                    "scenario1": "invalidBaseURL",
                    "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "2135678901",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
                  "expectedStatusCode": 404,
                  "expectedStatusMessage": "Not Found",
                  "invalidBase_URL":"https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/",
                  "endpoint": "/users/roleStatus",
                  "includeAuth": "true",
                  "schemaValidation": "no"
                  },
                 
        
        {
          "scenario": "post with role no auth",
          "scenario1": "post no auth",
          "userComments": "Network Engineer",
                    "userEduPg": "MSc Networking & Security",
                    "userEduUg": "BSc Electrical Engineering",
                    "userFirstName": "Olivia",
                    "userLastName": "Clark",
                    "userLinkedinUrl": "https://www.linkedin.com/in/oliviaclark",
                    "userLocation": "Los Angeles",
                    "userMiddleName": "Emily",
                    "userPhoneNumber": "2135678901",
                    "roleId": "R03",
                    "userRoleStatus": "Active",
                    "userTimeZone": "PST",
                    "userVisaStatus": "US-Citizen",
                    "loginStatus": "Active",
                    "userLoginEmail": "olivia.clark55@gmail.com",
        "expectedStatusCode": 401,
        "expectedStatusMessage": "Unauthorized",
        "endpoint": "/users/roleStatus",
        "includeAuth": "false",
        "schemaValidation": "no"
        },
        {
          "scenario": "post with role invalid auth",
          "scenario1": "post invalid auth",
        "expectedStatusCode": 401,
        "expectedStatusMessage": "Unauthorized",
        "endpoint": "/users/roleStatus",
        "includeAuth": "invalid",
        "invalidToken": "Invalid_Token_Value_12345",
        "schemaValidation": "no"
        }
             ]
              },
              {
                "name": "Get All Users Combined",
                "data": [
                  {
                    "scenario": "get all users valid endpoint",
                    "scenario1": "get all users",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint": "/users",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all users invalid endpoint",
                    "scenario1": "get all users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all users empty endpoint",
                    "scenario1": "get all users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all users with No Auth",
                    "scenario1": "get all users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users",
                    "includeAuth": "false",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all users with invalid Auth",
                    "scenario1": "get all users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all active users valid endpoint",
                    "scenario1": "get all active users",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint": "/users/activeUsers",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all active users with invalid endpoint",
                    "scenario1": "get all active users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all active users with empty endpoint",
                    "scenario1": "get all active users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all active users with no auth",
                    "scenario1": "get all active users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users/activeUsers",
                    "includeAuth": "false",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get all active users with invalid auth",
                    "scenario1": "get all active users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users/activeUsers",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "yes"
                  },
                  {
                    "scenario": "get emails of all active users valid endpoint",
                    "scenario1": "get email all active users",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint": "/fetch-emails",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get emails of all active users invalid endpoint",
                    "scenario1": "get email all active users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get emails of all active users empty endpoint",
                    "scenario1": "get email all active users",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get emails of all active users with no auth",
                    "scenario1": "get email all active users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users/activeUsers",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get emails of all active users with invalid auth",
                    "scenario1": "get email all active users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/fetch-emails",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all roles with valid endpoint",
                    "scenario1": "get all roles",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint": "/roles",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all roles with invalid endpoint",
                    "scenario1": "get all roles",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all roles with empty endpoint",
                    "scenario1": "get all roles",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all roles with no auth",
                    "scenario1": "get all roles",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/roles",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all roles invalid auth",
                    "scenario1": "get all roles",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/roles",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  },  
                 
                  {
                    "scenario": "get all user with roles with valid endpoint",
                    "scenario1": "get all user with roles",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/roles",
                    "includeAuth": "true",
                    "schemaValidation": "byRole"
                  },
                  {
                    "scenario": "get all user with roles with invalid endpoint",
                    "scenario1":"get all user with roles",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all user with roles with empty endpoint",
                    "scenario1":"get all user with roles",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all user with roles with no auth",
                    "scenario1":"get all user with roles",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint":"/users/roles",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get all user with roles invalid auth",
                    "scenario1":"get all user with roles",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint":"/users/roles",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation":"no"
                  },
                  {
                    "scenario": "get Users by roleId V2 valid endpoint",
                    "scenario1": "get Users by roleId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint": "/v2/users",
                    "includeAuth": "true",
                    "schemaValidation": "byRollIdV2"
                  },
                  {
                    "scenario": "get Users by roleId V2 invalid endpoint",
                    "scenario1": "get Users by roleId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/usersss",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Users by roleId V2 empty endpoint",
                    "scenario1": "get Users by roleId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Users by roleId V2 with No Auth",
                    "scenario1": "get Users by roleId",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/v2/users",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Users by roleId V2 invalid Auth",
                    "scenario1": "get Users by roleId",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/v2/users",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  }
                ]
              },
                  {
                    "name": "Get Count of Active/Inactive Users",
                    "data": [
                      {
                    "scenario": "get Count Active/InActive Users valid",
                    "scenario1": "get Count Active/InActive Users",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/byStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter all",
                    "scenario1": "by all",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/byStatus",
                    "idValue":"all",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter Admin rollId",
                    "scenario1": "by Admin rollId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/byStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter Staff rollId",
                    "scenario1": "by Staff rollId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/byStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter Student rollId",
                    "scenario1": "by Student rollId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "endpoint":"/users/byStatus",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter invalid Admin rollId",
                    "scenario1": "by Admin invalid rollId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint":"/users/byStatus",
                    "idValue":"R4#",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter invalid Staff rollId",
                    "scenario1": "by Staff invalid rollId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint":"/users/byStatus",
                    "idValue":"34ty",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with parameter invalid Student rollId",
                    "scenario1": "by Student invalid rollId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint":"/users/byStatus",
                    "idValue":"12dr",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with no auth",
                    "scenario1": "get Count Active/InActive Users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                   "endpoint":"/users/byStatus",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get Count Active/InActive Users with invalid auth",
                    "scenario1": "get Count Active/InActive Users",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint":"/users/byStatus",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  }
                ]
              },
              {
                "name": "Get User by UserId",
                "data": [
                  {
                    "scenario": "get user by Admin Userid valid",
                    "scenario1": "by Admin usersid",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "roleId":"R01",
                    "endpoint": "/users",
                    "includeAuth": "true",
                    "schemaValidation": "byId"
                  },
                  {
                    "scenario": "get user by Staff Userid valid",
                    "scenario1": "by usersid",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "roleId":"R02",
                    "endpoint": "/users",
                    "includeAuth": "true",
                    "schemaValidation": "byId"
                  },
                  {
                    "scenario": "get user by Student Userid valid",
                    "scenario1": "by usersid",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                    "roleId":"R03",
                    "endpoint": "/users",
                    "includeAuth": "true",
                    "schemaValidation": "byId"
                  },
                  {
                    "scenario": "get user by Userid with invalid numbers",
                    "scenario1": "usersid with numbers",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/748784447457",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get user by Userid with invalid alphabets",
                    "scenario1": "usersid with alphabets",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/hgser",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get user by Userid with special characters",
                    "scenario1": "usersid with special characters",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/U3$&",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get user by Userid with No Auth",
                    "scenario1": "by usersid",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get user by Userid with invalid Auth",
                    "scenario1": "by usersid",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users",
                    "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  }
                ]
            },
            
      {
        "name": "Get User by BatchId",
        "data": [
  {
    "scenario": "get User by Progaram Batches with BatchId valid",
    "scenario1": "by batchId",
    "expectedStatusCode": 200,
    "expectedStatusMessage": "OK",
    "endpoint": "/users/programBatch/{{BatchId}}",
    "includeAuth": "true",
    "schemaValidation": "byBatchId"
  },
  {
    "scenario": "get User by Progaram Batches by BatchId invalid numbers",
    "scenario1": "batchId with numbers",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
    "endpoint": "/users/programBatch/88877999998888",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get User by Progaram Batches by BatchId invalid alphabets",
    "scenario1": "batchId with alphabets",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
    "endpoint": "/users/programBatch/AHHbbsdjsbd",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get User by Progaram Batches by BatchId with special characters",
    "scenario1": "batchId with special characters",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
    "endpoint": "/users/programBatch/&#@^&7",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get User by Progaram Batches by BatchId with No Auth",
    "scenario1": "by batchId",
    "expectedStatusCode": 401,
    "expectedStatusMessage": "Unauthorized",
    "endpoint": "/users/programBatch/{{BatchId}}",
    "includeAuth": "false",
    "schemaValidation": "no"
  },
  {
    "scenario": "get User by Progaram Batches by BatchId with invalid Auth",
    "scenario1": "by batchId",
    "expectedStatusCode": 401,
    "expectedStatusMessage": "Unauthorized",
    "endpoint": "/users/programBatch/{{BatchId}}",
    "includeAuth": "invalid",
    "invalidToken": "Invalid_Token_Value_12345",
    "schemaValidation": "no"  
  }
]

},

{
  "name": "Get User by ProgramId",
  "data": [

  {
    "scenario": "get the User for Progaram with ProgramId valid",
    "scenario1": "by ProgramId",
    "expectedStatusCode": 200,
    "expectedStatusMessage": "OK",
   "endpoint": "/users/programs/{{programID}}",
    "includeAuth": "true",
    "schemaValidation": "byBatchId"
  },
  {
    "scenario": "get the User for Progaram with ProgramId invalid numbers",
    "scenario1": "ProgramId with numbers",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
   "endpoint": "/users/programs/586797690856",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get the User for Progaram with ProgramId invalid alphabets",
    "scenario1": "ProgramId with alphabets",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
    "endpoint": "/users/programs/3456712",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get the User for Progaram with ProgramId with special characters",
    "scenario1": "ProgramId with special characters",
    "expectedStatusCode": 404,
    "expectedStatusMessage": "Not Found",
    "endpoint": "/users/programs/547$$$",
    "includeAuth": "true",
    "schemaValidation": "no"
  },
  {
    "scenario": "get the User for Progaram with ProgramId with No Auth",
    "scenario1": "by ProgramId",
    "expectedStatusCode": 401,
    "expectedStatusMessage": "Unauthorized",
    "endpoint": "/users/programs/{{programID}}",
    "includeAuth": "false",
    "schemaValidation": "no"
  },
  {
    "scenario": "get the User for Progaram with ProgramId with invalid Auth",
    "scenario1": "by ProgramId",
    "expectedStatusCode": 401,
    "expectedStatusMessage": "Unauthorized",
    "endpoint": "/users/programs/{{programID}}",
    "includeAuth": "invalid",
    "invalidToken": "Invalid_Token_Value_12345",
    "schemaValidation": "no"
  }

  ]

  },
                    {
                    "name": "Get User by RoleId",
                    "data": [
                  
         {
                    "scenario": "get the User with Admin roleId valid",
                    "scenario1": "by Admin RoleId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                   "endpoint": "/users/roles/{{adminRoleId}}",
                    "includeAuth": "true",
                    "schemaValidation": "byRollId"
                  },
                  {
                    "scenario": "get the User with Staff roleId valid",
                    "scenario1": "by Staff RoleId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                   "endpoint": "/users/roles/{{studentRoleId}}",
                    "includeAuth": "true",
                    "schemaValidation": "byRollId"
                  },
                  {
                    "scenario": "get the User with Student roleId valid",
                    "scenario1": "by Student RoleId",
                    "expectedStatusCode": 200,
                    "expectedStatusMessage": "OK",
                   "endpoint": "/users/roles/{{studentRoleId}}",
                    "includeAuth": "true",
                    "schemaValidation": "byRollId"
                  },
        
        
                  {
                    "scenario": "get the User with roleId invalid numbers",
                    "scenario1": "by RoleId ",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                   "endpoint": "/users/roles/87866",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get the User with roleId invalid alphabets",
                    "scenario1": "by RoleId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/roles/khugy",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get the User with roleId with special characters",
                    "scenario1": "by RoleId",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/roles/R&1",
                    "includeAuth": "true",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get the User with roleId with No Auth",
                    "scenario1": "by RoleId",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users/roles/{{adminRoleId}}",
                    "includeAuth": "false",
                    "schemaValidation": "no"
                  },
                  {
                    "scenario": "get the User with roleId with invalid Auth",
                    "scenario1": "by RoleId",
                    "expectedStatusCode": 401,
                    "expectedStatusMessage": "Unauthorized",
                    "endpoint": "/users/roles/{{adminRoleId}}",
                   "includeAuth": "invalid",
                    "invalidToken": "Invalid_Token_Value_12345",
                    "schemaValidation": "no"
                  }
                ]
            },
        
            {
              "name": "Update User with UserID",
              "data": [
            {
                  
              "scenario":"Update user Information with UserID valid",
              "scenario1":"valid userId",
        
                 "userId":"{{Created_userId}}" ,  
                "userFirstName": "UpdatedJohn",
                "userLastName": "Doe",
               "userMiddleName": "Michael",
              "userPhoneNumber": "+91 5157891855",
                "userLocation": "NewYork",
              "userTimeZone": "EST",
              "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
              "userEduUg": "BSc Information Technology",
              "userEduPg": "MSc Computer Science",
              "userComments": "Experience in IT",
              "userVisaStatus": "GC-EAD",
               "userLoginEmail": "alice886.smith@gmail.com",
                "expectedStatusCode": 200,
               "expectedStatusMessage": "OK",
                "endpoint": "/users/{{Created_userId}}",
                "includeAuth": "true",
                "schemaValidation": "putbyuserId"         
                    },
                    {
                      "scenario":"Update user Information with UserID non existing",
                     "scenario1":"non existing userId",
           
                        "userId":"U00" ,  
                    "userFirstName": "John",
                    "userLastName": "Doe",
                   "userMiddleName": "Michael",
                  "userPhoneNumber": "+91 9443026205",
                    "userLocation": "NewYork",
                  "userTimeZone": "EST",
                  "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                  "userEduUg": "BSc Information Technology",
                  "userEduPg": "MSc Computer Science",
                  "userComments": "Experience in IT",
                  "userVisaStatus": "GC-EAD",
                   "userLoginEmail": "john5.doe99@gmail.com",
           
                     "expectedStatusCode": 404,
                      "expectedStatusMessage": "Not Found",
                       "endpoint": "/users/U00",
                       "includeAuth": "true",
                       "schemaValidation": "no"         
        
                       },
        
                       {
                        "scenario":"Update user Information with UserID with Invalid fields",
                       "scenario1":"userId with invalid fields",
             
                       "userId":"{{Created_userId}}" ,  
                       "userFirstName": "Updated John100",
                       "userMiddleName": "Michael njdn&&",
                       "userLastName": "Doe",
                          "userPhoneNumber": "9443026999",
                          "userLoginEmail": "john95.doe99@gmail.com",                                                                                                                
                         "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                        "userLocation": "NewYork", 
                        "userTimeZone": "EST",                                              
                        "userVisaStatus": "GC-EAD",
                        "userEduUg": "BSc Information Technology",
                        "userEduPg": "MSc Computer Science",
                        "userComments": "Experience in IT",
           
                     "expectedStatusCode": 400,
                      "expectedStatusMessage": "Bad Request",
                       "endpoint":"/users/{{Created_userId}}",
                       "includeAuth": "true",
                       "schemaValidation": "no"         
                         },
        
                         {
                          "scenario":"Update user Information with UserID with no auth",
                         "scenario1":"valid userId",
               
                            "userId":"{{Created_userId}}" ,  
                           "userFirstName": "Updated John",
                           "userMiddleName": "Michael",
                           "userLastName": "Doe", 
                              "userPhoneNumber": "+91 9443026999",
                             "userLoginEmail": "john100.doe99@gmail.com",                                                                                                                 
                             "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                            "userLocation": "NewYork", 
                            "userTimeZone": "EST",                                              
                            "userVisaStatus": "GC-EAD",
                            "userEduUg": "BSc Information Technology",
                            "userEduPg": "MSc Computer Science",
                            "userComments": "Experience in IT",
               
                         "expectedStatusCode": 401,
                          "expectedStatusMessage": "Unauthorized",
                           "endpoint": "/users/{{Created_userId}}",
                           "includeAuth": "false",
                           "schemaValidation": "no"         
                           }, 
        
                           {
                            "scenario":"Update user Information with UserID with invalid auth",
                           "scenario1":"valid userId",
                 
                              "userId":"{{Created_userId}}" ,  
                             "userFirstName": "Updated John",
                             "userMiddleName": "Michael",
                             "userLastName": "Doe",
                                "userPhoneNumber": "+91 9443026999",
                               "userLoginEmail": "john100.doe99@gmail.com",                                                                                                                 
                               "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                              "userLocation": "NewYork", 
                              "userTimeZone": "EST",                                              
                              "userVisaStatus": "GC-EAD",
                              "userEduUg": "BSc Information Technology",
                              "userEduPg": "MSc Computer Science",
                              "userComments": "Experience in IT",
                           "expectedStatusCode": 401,
                            "expectedStatusMessage": "Unauthorized",
                             "endpoint": "/users/{{Created_userId}}",
                             "includeAuth": "invalid",
                             "invalidToken": "Invalid_Token_Value_12345",
                             "schemaValidation": "no"         
                             },
                             {
                              "scenario":"Update user Information with UserID with invalid endpoint",
                             "scenario1":"update invalid endpoint",
                   
                                "userId":"{{Created_userId}}" ,  
                               "userFirstName": "Updated John",
                               "userMiddleName": "Michael",
                               "userLastName": "Doe",
                                  "userPhoneNumber": "+91 9443026999",
                                 "userLoginEmail": "john100.doe99@gmail.com",                                                                                                                 
                                 "userLinkedinUrl": "https://www.linkedin.com/in/johndoe",
                                "userLocation": "NewYork", 
                                "userTimeZone": "EST",                                              
                                "userVisaStatus": "GC-EAD",
                                "userEduUg": "BSc Information Technology",
                                "userEduPg": "MSc Computer Science",
                                "userComments": "Experience in IT",
                             "expectedStatusCode": 404,
                              "expectedStatusMessage": "Not Found",
                               "endpoint": "/useuybs/{{Created_userId}}",
                               "includeAuth": "true",
                               "schemaValidation": "no"         
                               }
                  ]
                },
        
                {
                  "name": "Update User RoleID",
                  "data": [
                {
                       "scenario":"Update RoleID with valid data",
                       "scenario1":"with RoleId",
                       "roleId": "R02",
                      "userRoleStatus": "Active",
                      "expectedStatusCode": 200,
                      "expectedStatusMessage": "OK",
                     "endpoint": "/users/roleId/{{Created_userId}}",
                    "includeAuth": "true",
                    "schemaValidation": "no",
                    "skipTest" :"true"
                },
                {
                  "scenario":"Update with invalid rollId",
                  "scenario1":"with RoleId",
                  "roleId": "R$U7",
                 "userRoleStatus": "Active",
                 "expectedStatusCode": 400,
                 "expectedStatusMessage": "Bad Request",
                "endpoint": "/users/roleId/{{Created_userId}}",
               "includeAuth": "true",
               "schemaValidation": "no"
           },
           {
            "scenario":"Update RoleID with invalid userId",
            "scenario1":"with RoleId",
            "roleId": "R03",
           "userRoleStatus": "Active",
           "expectedStatusCode": 404,
           "expectedStatusMessage": "Not Found",
          "endpoint": "/users/roleId/hyij^^",
         "includeAuth": "true",
         "schemaValidation": "no"
        },
        
        {
          "scenario":"Update RoleID with invalid endpoint",
          "scenario1":"with RoleId",
          "roleId": "R02",
         "userRoleStatus": "Active",
         "expectedStatusCode": 404,
         "expectedStatusMessage": "Not Found",
        "endpoint": "/users/ro78d/{{Created_userId}}",
        "includeAuth": "true",
        "schemaValidation": "no"
        },
        {
          "scenario":"Update RoleID with no auth",
          "scenario1":"with RoleId",
          "roleId": "R02",
         "userRoleStatus": "Active",
         "expectedStatusCode": 401,
         "expectedStatusMessage": "Unauthorized",
        "endpoint":"/users/roleId/{{Created_userId}}",
        "includeAuth":"false",
        "schemaValidation": "no"
        }
        
              ]
            },
            {
              "name": "Update User Role Program Batch Status",
              "data": [
            {
              "scenario":"Update User Role program batch status",
              "scenario1":"all valid",
              "userId": "{{Created_userId}}",
              "roleId": "R02",
              "programId":"{{programID}}",
               "batchId":"{{BatchId}}",
              "userRoleProgramBatchStatus": "Active",
              "expectedStatusCode": 200,
              "expectedStatusMessage": "OK",
              "endpoint": "/users/roleProgramBatchStatus/{{Created_userId}}",
              "includeAuth": "true",
            "schemaValidation": "no",
            "skipTest" :"true"
            },
            {
              "scenario":"Update User Role program batch status",
              "scenario1":"invalid user id",
              "userId": "{{Created_userId}}",
              "roleId": "R02",
              "programId":"{{programID}}",
               "batchId":"{{BatchId}}",
              "userRoleProgramBatchStatus": "Active",
              "expectedStatusCode": 404,  
              "expectedStatusMessage": "Not Found",
              "endpoint": "/users/roleProgramBatchStatus/U6P}",
              "includeAuth": "true",
            "schemaValidation": "no"
            },
            {
              "scenario":"Update User Role program batch status",
              "scenario1":"empty program id",
              "userId": "{{Created_userId}}",
              "roleId": "R02",
              "programId":"",
               "batchId":"{{BatchId}}",
              "userRoleProgramBatchStatus": "Active",
              "expectedStatusCode": 400,
              "expectedStatusMessage": "Bad Request",
                "endpoint":"/users/roleProgramBatchStatus/{{Created_userId}}",
              "includeAuth": "true",
            "schemaValidation": "no"
          
            },
            {
              "scenario":"Update User Role program batch status",
              "scenario1":"empty program id",
              "userId": "{{Created_userId}}",
              "roleId": "R02",
              "programId":"",
               "batchId":"{{BatchId}}",
              "userRoleProgramBatchStatus": "Active",
              "expectedStatusCode": 401,
              "expectedStatusMessage": "Unauthorized",
              "endpoint":"/users/roleProgramBatchStatus/{{Created_userId}}",
              "includeAuth":"false",
            "schemaValidation": "no"
          
            }
          ]
        },
        
            {
              "name": "Update User Login Status",
              "data": [
            {
              "scenario":"Update User Login Status all valid",
              "scenario1":"all valid",
        
            "userLoginEmail":"ems176@gmail.com",
            "loginStatus": "Active",
             "status": "Active",
              "expectedStatusCode": 200,
            "expectedStatusMessage": "OK",
            "endpoint": "/users/userLogin/{{Created_userId}}",
            "includeAuth": "true",
            "schemaValidation": "no",
            "skipTest" :"true"
            },
            {
              "scenario":"Update User Login Status empty email",
               "scenario1":"empty email",
        
              "userLoginEmail": "",
              "loginStatus": "active",
              "status": "active",
              "expectedStatusCode": 400,
              "expectedStatusMessage": "Bad Request",
              "endpoint": "/users/userLogin/{{Created_userId}}",
              "includeAuth": "true",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status empty login status",
               "scenario1":"empty loginstatus",
        
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "",
              "status": "active",
              "expectedStatusCode": 400,
              "expectedStatusMessage": "Bad Request",
              "endpoint": "/users/userLogin/{{Created_userId}}",
              "includeAuth": "true",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status empty status",
               "scenario1":"empty status",
        
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "active",
              "status": "",
              "expectedStatusCode": 400,
              "expectedStatusMessage": "Bad Request",
              "endpoint": "/users/userLogin/{{Created_userId}}",
              "includeAuth": "true",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status invalid login status",
               "scenario1":"invalid loginstatus",
        
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "12bdhb**6",
              "status": "active",
              "expectedStatusCode": 400,
              "expectedStatusMessage": "Bad Request",
              "endpoint": "/users/userLogin/{{Created_userId}}",
              "includeAuth": "true",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status invalid userid",
               "scenario1":"invalid userId",
        
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "active",
              "status": "active",
              "expectedStatusCode": 404,
              "expectedStatusMessage": "Not Found",
              "endpoint": "/users/userLogin/uk890",
              "includeAuth": "true",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status invalid endpoint",
              "scenario1":"invalid endpoint",
            "userLoginEmail": "abcdefgh999@gmail.com",
            "loginStatus": "active",
            "status": "active",
              "expectedStatusCode": 404,
            "expectedStatusMessage": "Not Found",
            "endpoint": "/users/usegin/{{Created_userId}}",
            "includeAuth": "true",
            "schemaValidation": "no"
            
            },
        
            {
              "scenario":"Update User Login Status no auth",
               "scenario1":"no auth",
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "active",
              "status": "active",
              "expectedStatusCode": 401,
              "expectedStatusMessage": "Unauthorized",
              "endpoint": "/users/userLogin/uk890",
              "includeAuth":"false",
              "schemaValidation": "no"
            },
            {
              "scenario":"Update User Login Status invalid auth",
               "scenario1":"invalid authorization",
              "userLoginEmail": "abbj67@gmail.com",
              "loginStatus": "active",
              "status": "active",
              "expectedStatusCode": 401,
              "expectedStatusMessage": "Unauthorized",
              "endpoint": "/users/userLogin/uk890",
              "includeAuth": "invalid",
              "invalidToken": "Invalid_Token_Value_12345",
              "schemaValidation": "no"
            }
            
          ]
        },
        {
          "name":"Delete a User",
          "data":[
            {
            "scenario1": "Delete valid",
            "expectedStatusCode": 200,
            "expectedStatusMessage": "OK",
            "endpoint": "/users/{{Created_userId}}",
            "includeAuth": "true",
            "skipTest" :"true"
          },
          {
            "scenario1": "Delete invalid userid",
            "expectedStatusCode": 404,
            "expectedStatusMessage": "Not Found",
            "endpoint": "/users/98**l",
            "includeAuth": "true"
          },
          {
            "scenario1": "Delete no auth",
            "expectedStatusCode": 401,
            "expectedStatusMessage": "Unauthorized",
            "endpoint": "/users/98**l",
            "includeAuth": "false"
        
          },
          {
            "scenario1": "Delete invalid auth",
            "expectedStatusCode": 401,
            "expectedStatusMessage": "Unauthorized",
            "endpoint": "/users/98**l",
            "includeAuth": "invalid",
            "invalidToken": "Invalid_Token_Value_12345"
        
          }
        ]
        },
        
                  {
                  "name":"Cleanup User",
                  "data":[
                    {
                    "scenario1": "cleanup",
                    "expectedStatusCode": 404,
                    "expectedStatusMessage": "Not Found",
                    "endpoint": "/users/{{adminUserId}}",
                    "includeAuth": "true",
                    "skipTest" :"true"
        
                  }
                ]
            },
            {
                "name": "Post Program",
                "data" :[
                    {
                   
                    "programDescription": "SDET",
                    "programName": "Selenium-Paetrickpython-bn",
                    "programStatus": "Active",
                    "expectedStatusCode": 201,
                    "expectedStatusMessage": "Created",
                    "endpoint": "/saveprogram",
                    "includeAuth": "true"
                    }   ,
                    
                    {
                       "programDescription": "SDET and DA",
                        "programName": "Selenium-Paetrickruby-bn",
                        "programStatus": "Active",
                        "expectedStatusCode": 201,
                        "expectedStatusMessage": "Created",
                        "endpoint": "/saveprogram",
                        "includeAuth": "true"
                        } ,
                       
                
                        {
                           
                            "programDescription": "SDET and DA",
                            "programName": "Spongebob",
                            "programStatus": "",
                            "expectedStatusCode": 400,
                            "expectedStatusMessage": "Bad Request",
                            "endpoint": "/saveprogram",
                            "includeAuth": "true"
                        
                            },
                            {
                                "programDescription": "SDET and DA",
                                "programName": "Spongebob",
                                "programStatus": "561234",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/saveprogram",
                                "includeAuth": "true"
                            
                                },
                            {
                                
                                "programDescription": "SDET and DA",
                                "programName": "",
                                "programStatus": "Active",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/saveprogram",
                                "includeAuth": "true"
                                
                                },
                                
                                
                            {
                                
                                "programDescription": "SDET and DA",
                                "programName": "Sponegebob-squarepants",
                                "programStatus": "Active",
                                "expectedStatusCode": 401,
                                "expectedStatusMessage": "Unauthorized",
                                "endpoint": "/saveprogram",
                                "includeAuth": "invalid"
                                    },
                            {
                               
                                "programDescription": "SDET and DA",
                                "programName": "Sponegebob-squarepants",
                                "programStatus": "Active",
                                "expectedStatusCode": 401,
                                "expectedStatusMessage": "Unauthorized",
                                "endpoint": "/saveprogram",
                                "includeAuth": "invalid"
                                   
                            },
                            {
                
                                "programDescription": "SDET and DA",
                                "programName": "Sponegebob-squarepants",
                                "programStatus": "Active",
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "endpoint": "/saveprogramt/",
                                "includeAuth": "true"
                                    }
                        ]
                    },
                
                    {
                        "name": "Get All Programs",
                        "data":[
                            
                            {
                                "expectedStatusCode": 200,
                                "expectedStatusMessage": "OK",
                                "endpoint": "/allPrograms",
                                "includeAuth": "true"
                            },
                            {
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "endpoint": "/allProgramss",
                                "includeAuth": "true"
                            },
                            {
                                "expectedStatusCode": 401,
                                "expectedStatusMessage": "Unauthorized",
                                "endpoint": "/allPrograms",
                                "includeAuth": "invalid"
                            },
                            {
                                "expectedStatusCode": 401,
                                "expectedStatusMessage": "Unauthorized",
                                "endpoint": "/allPrograms",
                                "includeAuth": "invalid"
                            }
                    
                        ]
                                     
                    },
                    
                    
                    {
                        "name":"Get All Programs with Users",
                        "data":[
                                {
                                "expectedStatusCode": 200,
                                "expectedStatusMessage": "OK",
                                "endpoint": "/allProgramsWithUsers",
                                "includeAuth": "true"
                                },
                                {
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "endpoint": "/allProgramsWithUserss",
                                    "includeAuth": "true"
                                },
                    
                                {
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/allProgramsWithUsers",
                                    "includeAuth": "invalid"
                                },
                                {
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/allProgramsWithUsers",
                                    "includeAuth": "invalid"
                                }
                    
                    
                    
                    ]
                        },
                        {
                            "name":"Get Program by programId",
                            "data":[
                                    {
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/programs/{{programID}}",
                                    "includeAuth": "true"
                                    },
                                    {
                                        "expectedStatusCode": 404,
                                        "expectedStatusMessage": "Not Found",
                                        "endpoint": "/programss/{{programID}}",
                                        "includeAuth": "true"
                                    },
                        
                                    {
                                        "expectedStatusCode": 401,
                                        "expectedStatusMessage": "Unauthorized",
                                        "endpoint": "/programs/{{programID}}",
                                        "includeAuth": "invalid"
                                    },
                                    {
                                        "expectedStatusCode": 401,
                                        "expectedStatusMessage": "Unauthorized",
                                        "endpoint": "/programs/{{programID}}",
                                        "includeAuth": "invalid"
                                    },
                                    {
                                        "expectedStatusCode": 404,
                                        "expectedStatusMessage": "Not Found",
                                        "endpoint": "/programs/0420{{programID}}",
                                        "includeAuth": "true"
                                    }       
                        
                        ]
                            },
                
                    {
                        "name": "PUT Program by ProgramName",
                        "data": [
                            {
                               
                                "programDescription": "SDET and DA",
                                "rep_programName": "Camp-corale-bn",
                                "programStatus": "Active",
                                "expectedStatusCode": 200,
                                "expectedStatusMessage": "OK",
                                "endpoint": "/program/{{ProgramName}}",
                                "includeAuth": "true"
                            
                                },
                                {
                                "programDescription": "SDET and DA",     
                                "rep_programName": "Camp-corale-bn",
                                "programStatus": "561234",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/program/{{ProgramName}}",
                                "includeAuth": "true"
                                
                                    },
                                {
                                    
                                    "programDescription": "SDET and DA",
                                    "rep_programName": "",
                                    "programStatus": "Active",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "endpoint": "/program/{{ProgramName}}",
                                    "includeAuth": "true"
                                    
                                    },
                                    
                                    {
                    
                                    "programDescription": "SDET and DA",
                                    "rep_programName": "Camp-corale-bn",
                                    "programStatus": "",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "endpoint": "/program/{{ProgramName}}",
                                    "includeAuth": "true"
                                        },
                                {
                                    
                                    "programDescription": "SDET and DA",
                                    "rep_programName": "Camp-corale-bn",
                                    "programStatus": "Active",
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/program/{{ProgramName}}",
                                    "includeAuth": "invalid"
                                        },
                                        {
                                    
                                            "programDescription": "SDET and DA",
                                            "rep_programName": "Camp-corale-bn",
                                            "programStatus": "Active",
                                            "expectedStatusCode": 404,
                                            "expectedStatusMessage": "Not Found",
                                            "endpoint": "/program/aaaaaa777",
                                            "includeAuth": "true"
                                                },
                                {
                                   
                                    "programDescription": "SDET and DA",
                                    "rep_programName": "Camp-corale-bn",
                                    "programStatus": "Active",
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/program/{{ProgramName}}",
                                    "includeAuth": "invalid"
                                       
                                }
                            ]
                        },
                        {
                            "name": "PUT Program by ProgramId",
                            "data": [
                                {
                                   
                                    "programDescription": "SDET and DA",
                                    "rep_programName": "Sandy-theSquirrele-bn",
                                    "programStatus": "Active",
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/putprogram/{{programID}}",
                                    "includeAuth": "true"
                                
                                    },
                                    {
                
                                    "programDescription": "SDET and DA",     
                                    "rep_programName": "Sandy-theSquirrele-bn",
                                    "programStatus": "561234",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "endpoint": "/putprogram/{{programID}}",
                                    "includeAuth": "true"
                                    
                                        },
                                    {
                                        
                                        "programDescription": "SDET and DA",
                                        "rep_programName": "",
                                        "programStatus": "Active",
                                        "expectedStatusCode": 400,
                                        "expectedStatusMessage": "Bad Request",
                                        "endpoint": "/putprogram/{{programID}}",
                                        "includeAuth": "true"
                                        
                                        },
                                        
                                        {
                        
                                        "programDescription": "SDET and DA",
                                        "rep_programName": "Sandy-theSquirrele-bn",
                                        "programStatus": "",
                                        "expectedStatusCode": 400,
                                        "expectedStatusMessage": "Bad Request",
                                        "endpoint": "/putprogram/{{programID}}",
                                        "includeAuth": "true"
                                            },
                                    {
                                        
                                        "programDescription": "SDET and DA",
                                        "rep_programName": "Sponegebob-squarepants",
                                        "programStatus": "Active",
                                        "expectedStatusCode": 401,
                                        "expectedStatusMessage": "Unauthorized",
                                        "endpoint": "/putprogram/{{programID}}",
                                        "includeAuth": "invalid"
                                            },
                                            {
                                        
                                                "programDescription": "SDET and DA",
                                                "rep_programName": "Sponegebob-squarepants",
                                                "programStatus": "Active",
                                                "expectedStatusCode": 404,
                                                "expectedStatusMessage": "Not Found",
                                                "endpoint": "/putprogramsss/{{programID}}",
                                                "includeAuth": "true"
                                                    },
                                    {
                                       
                                        "programDescription": "SDET and DA",
                                        "rep_programName": "Sponegebobee-squarepants",
                                        "programStatus": "Active",
                                        "expectedStatusCode": 401,
                                        "expectedStatusMessage": "Unauthorized",
                                        "endpoint": "/putprogram/{{programID}}",
                                        "includeAuth": "invalid"
                                           
                                    }
                                ]
                            },
                
                     
                
                    {
                        "name": "Delete Program by id",
                        "data":
                        [
                            {
                            "expectedStatusCode": 200,
                            "expectedStatusMessage": "OK",
                            "endpoint": "/deletebyprogid/{{programID}}",
                            "includeAuth": "true",
                             "skipTest":"true"
                
                       },
                            {
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "endpoint": "/deletebyprogid/000001",
                                "includeAuth": "true"
                        
                                },
                
                                {
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "endpoint": "/deletebyprogids/{{programID}}",
                                    "includeAuth": "true"
                            
                                    },   
                                {
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/deletebyprogids/{{programID}}",
                                    "includeAuth": "invalid"
                                
                                    }  
                             
                    ]
                
                },
                {
                    "name": "Delete by program name",
                    "data":
                    [
                              {"expectedStatusCode": 200,
                                  "expectedStatusMessage": "OK",
                                 "endpoint": "/deletebyprogname/{{ProgramName}}",
                                "includeAuth": "true",
                                "skipTest":"true"
                           
                            },
                
                            {
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "endpoint": "/deletebyprognames/{{ProgramName}}",
                                "includeAuth": "true"
                        
                                },   
                                {
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/deletebyprogname/{{ProgramName}}",
                                    "includeAuth": "invalid"
                            
                                    },   
                                    {
                                        "expectedStatusCode": 404,
                                        "expectedStatusMessage": "Not Found",
                                        "endpoint": "/deletebyprogname/000001",
                                        "includeAuth": "true"
                                
                                    }
                                ]
                            },
                            {
                                "name": "Create Class",
                                "data": [
                                  {
                                    "scenario": "create class with all fields",
                                    "batchId": "{{BatchId}}",
                                    "classNo": 2,
                                    "classDate": "2025-11-21T15:11:08.750+00:00",
                                    "classTopic": "Zoologya",
                                    "classStatus": "Active",
                                    "classStaffId": "{{staffUserId}}",
                                    "classDescription": "Starting ch 1",
                                    "classComments": "Basic to Advance",
                                    "classNotes": "Test notes",
                                    "classRecordingPath": "C:/Recordings",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 201,
                                    "expectedStatusMessage": "Created",
                                    "endpoint": "/CreateClassSchedule",
                                    "includeAuth": "true"
                                             
                            },
                            {
                               "scenario": "create class with invalid endpoint",
                               "batchId": "{{BatchId}}",
                               "classNo": 2,
                               "classDate": "2025-11-21T15:11:08.750+00:00",
                               "classTopic": "Biology",
                               "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                               "classDescription": "Starting ch 1",
                               "classComments": "Basic to Advance",
                               "classNotes": "Test notes",
                               "classRecordingPath": "C:/Recordings",
                               "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                               "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                               "expectedStatusCode": 404,
                               "expectedStatusMessage": "Not Found",
                               "endpoint": "/CreateSchedule",
                               "includeAuth": "true"
                           },
                   
                   
                            {
                                "scenario": "create class with only mandatory fields",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Chemistry",
                                "classStatus": "Active",
                              "classStaffId": "{{staffUserId}}",
                                "classDescription":"" ,
                                "classComments":"" ,
                                "classNotes":"" ,
                                "classRecordingPath": "",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 201,
                                "expectedStatusMessage": "Created",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                       
                           {
                               "scenario": "create class without authorization",
                               "batchId": "{{BatchId}}",
                               "classNo": 2,
                               "classDate": "2025-11-21T15:11:08.750+00:00",
                               "classTopic": "Biology",
                               "classStatus": "Active",
                              "classStaffId": "{{staffUserId}}",
                               "classDescription": "Starting ch 1",
                               "classComments": "Basic to Advance",
                               "classNotes": "Test notes",
                               "classRecordingPath": "C:/Recordings",
                               "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                               "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                               "expectedStatusCode": 401,
                               "expectedStatusMessage": "Unauthorized",
                               "endpoint": "/CreateClassSchedule",
                               "includeAuth": "false"
                           },
                           {
                                "scenario": "create class without classTopic",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "",
                                "classStatus": "Active",
                                "classStaffId": "{{staffUserId}}",
                               "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                                              
                            },
                            
                           
                            {
                                "scenario": "create class without classDate",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "",
                                "classTopic": "",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                               "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                                           
                            },
                            {
                                "scenario": "create class without classNo",
                                "batchId": "{{BatchId}}",
                                "classNo":  "null",
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class without staff Id",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class without classStatus",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with past classDate",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2023-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with past classScheduleDates",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2023-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2023-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with mismatch between classNo and classScheduledDates",
                                "batchId": "{{BatchId}}",
                                "classNo": 5,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with existing classTopic",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with non-existing batch Id",
                                "batchId": "abc",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with special characters in classComments",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                               "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "@#$",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with special characters in classDescription",
                                "batchId": "{{BatchId",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "{{staffUserId}}",
                                "classDescription": "^&*",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with classNo as 0",
                                "batchId": "{{BatchId}}",
                                "classNo": 0,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "{{staffUserId}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                                "scenario": "create class with {{studentUserId}} as classStaffId",
                                "batchId": "{{BatchId}}",
                                "classNo": 2,
                                "classDate": "2025-11-21T15:11:08.750+00:00",
                                "classTopic": "Biology",
                                "classStatus": "Active",
                                "classStaffId": "{{studentUserId}}}}",
                                "classDescription": "Starting ch 1",
                                "classComments": "Basic to Advance",
                                "classNotes": "Test notes",
                                "classRecordingPath": "C:/Recordings",
                                "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                "expectedStatusCode": 400,
                                "expectedStatusMessage": "Bad Request",
                                "endpoint": "/CreateClassSchedule",
                                "includeAuth": "true"
                            },
                            {
                             "scenario": "create class with all valid feilds again",
                             "batchId": "{{BatchId}}",
                             "classNo": 2,
                             "classDate": "2025-11-21T15:11:08.750+00:00",
                             "classTopic": "Biology",
                             "classStatus": "Active",
                             "classStaffId": "{{staffUserId}}",
                             "classDescription": "Starting ch 1",
                             "classComments": "Basic to Advance",
                             "classNotes": "Test notes",
                             "classRecordingPath": "C:/Recordings",
                             "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                             "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                             "expectedStatusCode": 400,
                             "expectedStatusMessage": "Bad Request",
                             "endpoint": "/CreateClassSchedule",
                             "includeAuth": "true"
                                      
                     },
                     {
                       "scenario": "create class with special characters",
                       "batchId": "!@#$%",
                       "classNo": "!@#$%",
                       "classDate": "!@#$%",
                       "classTopic": "!@#$%",
                       "classStatus": "!@#$%",
                       "classStaffId": "!@#$%",
                       "classDescription": "!@#$%",
                       "classComments": "!@#$%",
                       "classNotes": "!@#$%",
                       "classRecordingPath": "!@#$%",
                       "classScheduledDates_1": "!@#$%",
                       "classScheduledDates_2":"!@#$%",
                       "expectedStatusCode": 400,
                       "expectedStatusMessage": "Bad Request",
                       "endpoint": "/CreateClassSchedule",
                       "includeAuth": "true"
                                
                     },
                     {
                       "scenario": "create class with numeric values",
                       "batchId": "12345",
                       "classNo": "12345",
                       "classDate": "12345",
                       "classTopic": "12345",
                       "classStatus": "12345",
                       "classStaffId": "12345",
                       "classDescription": "12345",
                       "classComments": "12345",
                       "classNotes": "12345",
                       "classRecordingPath": "12345",
                       "classScheduledDates_1": "12345",
                       "classScheduledDates_2": "12345",
                       "expectedStatusCode": 400,
                       "expectedStatusMessage": "Bad Request",
                       "endpoint": "/CreateClassSchedule",
                       "includeAuth": "true"
                                
                     },
                     {
                       "scenario": "create class with alphanumeric value",
                       "batchId": "ABC123",
                       "classNo": "ABC123",
                       "classDate": "ABC123",
                       "classTopic": "ABC123",
                       "classStatus": "ABC123",
                       "classStaffId": "ABC123",
                       "classDescription": "ABC123",
                       "classComments": "ABC123",
                       "classNotes": "ABC123",
                       "classRecordingPath": "ABC123",
                       "classScheduledDates_1": "ABC123",
                       "classScheduledDates_2": "ABC123",
                       "expectedStatusCode": 400,
                       "expectedStatusMessage": "Bad Request",
                       "endpoint": "/CreateClassSchedule",
                       "includeAuth": "true"
                                
                     },
                     {
                       "scenario": "create class with string value",
                       "batchId": "ABCDE",
                       "classNo": "ABCDE",
                       "classDate": "ABCDE",
                       "classTopic": "ABCDE",
                       "classStatus": "ABCDE",
                       "classStaffId": "ABCDE",
                       "classDescription": "ABCDE",
                       "classComments":"ABCDE",
                       "classNotes": "ABCDE",
                       "classRecordingPath": "ABCDE",
                       "classScheduledDates_1": "ABCDE",
                       "classScheduledDates_2": "ABCDE",
                       "expectedStatusCode": 400,
                       "expectedStatusMessage": "Bad Request",
                       "endpoint": "/CreateClassSchedule",
                       "includeAuth": "true"
                                
                     }
                        ]
                     },
                           {
                             "name": "All Classes",
                             "data": [
                               {
                                 "scenario": "get all class list positive",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/allClasses",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all class list without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/allClasses",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get all class list with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/allClassestestendpoint",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                            "name": "Recording by BatchId",
                            "data": [
                              {
                                "scenario": "get class recordings by valid BatchId",
                                "expectedStatusCode": 200,
                                "expectedStatusMessage": "OK",
                                "endpoint": "/batchRecordings/{{BatchId}}",
                                "includeAuth": "true"
                              },
                              {
                                "scenario": "get class recordings by invalid BatchId",
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "expectedResponseMessage": "Class Recording not found with batchId :903632",
                                "expectedResponseStatus": false,
                                "endpoint": "/batchRecordings/903632",
                                "includeAuth": "true"
                              },
                              {
                                "scenario": "get class recordings without authorization",
                                "expectedStatusCode": 401,
                                "expectedStatusMessage": "Unauthorized",
                                "endpoint": "/batchRecordings/{{BatchId}}",
                                "includeAuth": "false"
                              },
                             
                              {
                                "scenario": "get class recordings with invalid endpoint",
                                "expectedStatusCode": 404,
                                "expectedStatusMessage": "Not Found",
                                "endpoint": "/batchRecordingstestEndpoint/{{BatchId}}",
                                "includeAuth": "true"
                              }
                            ]
                          },
                           {
                             "name": "Classdetail by Id",
                             "data": [
                               {
                                 "scenario": "get class details by valid ClassID",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/class/{{ClassId}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class details by invalid ClassId",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "ClassSchedule is not found for classId :903632",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/class/903632",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class details by id without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/class/{{ClassId}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get class details by id with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classtestEndpoint/{{ClassId}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Class by class Topic",
                             "data": [
                               {
                                 "scenario": "get all classes by valid class topic",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/classes/{{ClassTopic}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by non-existing class topic",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "classes with class topic Name: testClassTopic for test not found",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/classes/testClassTopic for test",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by class topic with special characters",
                                 "expectedStatusCode": 400,
                                 "expectedStatusMessage": "Bad Request",
                                 "endpoint": "/classes/topic!@$%^&*(",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by class topic without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/classes/{{ClassTopic}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get all classes by class topic with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classTestEndpoint/{{ClassTopic}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Class by BatchId",
                             "data": [
                               {
                                 "scenario": "get all classes by valid batchId",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/classesbyBatch/{{BatchId}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by invalid batchId",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "classes with this batchId 97411111not found",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/classesbyBatch/97411111",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by batchId with special characters",
                                 "expectedStatusCode": 400,
                                 "expectedStatusMessage": "Bad Request",
                                 "endpoint": "/classesbyBatch/974!@$%^&*()",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by batchId without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/classesbyBatch/{{BatchId}}",
                                 "includeAuth": "false"
                               },
                              
                               {
                                 "scenario": "get all classes by batchId with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classesbyBatchTestEndpoint/{{BatchId}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Class by StaffId",
                             "data": [
                               {
                                 "scenario": "get all classes by valid StaffId",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/classesByStaff/{{staffUserId}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by invalid StaffId",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "classes with this staffId U0777 not found",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/classesByStaff/U0777",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by class topic with special characters",
                                 "expectedStatusCode": 400,
                                 "expectedStatusMessage": "Bad Request",
                                 "endpoint": "/classesByStaff/0777!@$%^",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all classes by class topic without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/classesByStaff/{{staffUserId}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get all classes by class topic with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classesByStaff{{staffUserId}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "All recordings",
                             "data": [
                               {
                                 "scenario": "Get all recordings positive",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/classrecordings",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "Get all recordings without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/classrecordings",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "Get all recordings with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classrecordingstestendpoint",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Class by classId",
                             "data": [
                               {
                                 "scenario": "get class recordings by valid classId",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/classRecordings/{{ClassId}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings by invalid ClassID",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "Class not found with Id : 903632 ",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/classRecordings/903632",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings by ClassID with no recordings",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "Class recording url not found for class id: 577",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/classRecordings/577",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings by ClassID without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/classRecordings/{{ClassId}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get class recordings by ClassID with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/classRecordingstestEndpoint/{{ClassId}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Upcoming classes",
                             "data": [
                               {
                                 "scenario": "get all upcoming classes by valid {{studentUserId}}",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/upcomingClasses/{{studentUserId}}}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all upcoming classes by invalid {{studentUserId}}",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/upcomingClasses/903632",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get all upcoming classes by {{studentUserId}} without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/upcomingClasses/{{studentUserId}}}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get all upcoming classes by {{studentUserId}} with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/upcomingClassestestEndpoint/{{studentUserId}}}}",
                                 "includeAuth": "true"
                               }
                             ]
                           },
                           {
                             "name": "Class by classId",
                             "data": [
                               {
                                 "scenario": "get class recordings download by valid classId",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "OK",
                                 "endpoint": "/download/{{classId}}",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings download by invalid classID",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "Class not found with Id : 903632 ",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/download/903632",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings download by classID with no recordings",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "Class recording url not found for class id: 577",
                                 "expectedResponseStatus": false,
                                 "endpoint": "/download/577",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "get class recordings download by classID without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/download/{{classId}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "get class recordings download by classID with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "endpoint": "/downloadtestEndpoint/{{classId}}",  
                                 "includeAuth": "true"
                               }
                              ]
                            },
                               {
                                "name": "New Class",
                                "data": [
                                  {
                                    "scenario": "update class with all fields",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with only mandatory fields",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "",
                                    "classDate": "2025-12-09",
                                    "classDescription": "",
                                    "classNo": 1,
                                    "classNotes": "",
                                    "classRecordingPath": "",
                                    "classStaffId": "U26",
                                    "classStatus": "Inactive",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "",
                                    "classScheduledDates_2": "",
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without classTopic",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class Topic cannot be null or empty",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without classDate",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class date cannot be null or empty",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without classNo",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": "null",
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class No cannot be null or empty",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without staff Id",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Staff Id cannot be null or empty",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without classStatus",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class Status cannot be null or empty",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with past classDate",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Please provide a Future Class Date",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with past classScheduleDates",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Please provide Future Class Dates for Class Schedule",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with mismatch between classNo and classScheduledDates",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 7,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Count of Class Scheduled Dates should be equal to Number of Classes",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with existing classTopic",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class already exists with given Class Topic : super keywords AC12",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with non-existing batch Id",
                                    "batchId": "1234567",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "Batch not found with Id : 987987 ",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with special characters in classComments",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "!@#$%^&*()",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class Comments must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with special characters in classDescription",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": ")(*&^%$#@!",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class description must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with classNo as 0",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 0,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "ClassNo should be greater than 0",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with {{studentUserId}} as classStaffId",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "{{studentUserId}}}}",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "User not found with Role(Staff) : U07 ",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with non-existing classStaffId",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "B67",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "Staff Id 12345 not found",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with special characters in classStatus",
                                   "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": ")*^&(",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 400,
                                    "expectedStatusMessage": "Bad Request",
                                    "expectedResponseMessage": "Class Status can only be Active or Inactive",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class  for non-existing class Id",
                                   "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "Class not found with Id : 7894561 ",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/7894561",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class with new batchId",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "ClassId with {ClassId} and batchId with {BatchId} not found",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class without authorization",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/updateClass/{{ClassId}}",
                                    "includeAuth": "false"
                                  },
                                 
                                  {
                                    "scenario": "update class with invalid endpoint",
                                    "batchId": "{{BatchId}}",
                                    "classComments": "Java opps",
                                    "classDate": "2025-12-09",
                                    "classDescription": "Basic",
                                    "classNo": 1,
                                    "classNotes": "notes",
                                    "classRecordingPath": "C:Recordings",
                                    "classStaffId": "U49",
                                    "classStatus": "Active",
                                    "classTopic": "keywords",
                                    "classScheduledDates_1": "2025-11-21T15:11:08.750+00:00",
                                    "classScheduledDates_2": "2025-11-21T15:11:08.750+00:00",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "endpoint": "/classTestEndpoint/{{ClassId}}",
                                    "includeAuth": "true"
                                  }
                                ]
                              },
                              {
                                "name": "Class Recording Path",
                                "data": [
                                  {
                                    "scenario": "update class recordings with valid data",
                                    "classRecordingPath": "d:recording",
                                    "csId": "{{ClassId}}",
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/updateClassrecording/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class recordings without classRecordingPath field",
                                    "classRecordingPath": "",
                                    "csId": "{{ClassId}}",
                                    "expectedStatusCode": 200,
                                    "expectedStatusMessage": "OK",
                                    "endpoint": "/updateClassrecording/{{ClassId}}",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class recordings non-existing classId",
                                    "classRecordingPath": "d:recording",
                                    "csId": "{{ClassId}}",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "expectedResponseMessage": "no record found with 789451",
                                    "expectedResponseStatus": false,
                                    "endpoint": "/updateClassrecording/789451",
                                    "includeAuth": "true"
                                  },
                                  {
                                    "scenario": "update class recordings without authorization",
                                    "classRecordingPath": "d:recording",
                                    "csId": "{{ClassId}}",
                                    "expectedStatusCode": 401,
                                    "expectedStatusMessage": "Unauthorized",
                                    "endpoint": "/updateClassrecording/{{ClassId}}",
                                    "includeAuth": "false"
                                  },
                                  
                                  {
                                    "scenario": "update class recordings with invalid endpoint",
                                    "classRecordingPath": "d:recording",
                                    "csId": "{{ClassId}}",
                                    "expectedStatusCode": 404,
                                    "expectedStatusMessage": "Not Found",
                                    "endpoint": "/classTestEndpoint/{{ClassId}}",
                                    "includeAuth": "true"
                                  }
                             ]
                           },
                           {
                             "name": "Class Negative",
                             "data": [
                               {
                                 "scenario": "delete class by non-existing classId",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                 "expectedResponseMessage": "record not found with classId",
                                 "expectedResponseStatus": false,
                                 "endpoint": "deleteByClass/789456123",
                                 "includeAuth": "true"
                               },
                               {
                                 "scenario": "delete class without authorization",
                                 "expectedStatusCode": 401,
                                 "expectedStatusMessage": "Unauthorized",
                                 "endpoint": "/deleteByClass/{{ClassId}}",
                                 "includeAuth": "false"
                               },
                               
                               {
                                 "scenario": "delete class with invalid endpoint",
                                 "expectedStatusCode": 404,
                                 "expectedStatusMessage": "Not Found",
                                "endpoint": "/deleteClass/{{ClassId}}",
                                 "includeAuth": "true"
                               }
                               
                             ]
                           },
                           {
                             "name": "Class",
                             "data": [
                               {
                                 "scenario": "delete class with valid details",
                                 "expectedStatusCode": 200,
                                 "expectedStatusMessage": "ok",
                                 "endpoint": "/deleteByClass/{{ClassId}}",
                                 "includeAuth": "true"
                               }
                         
                               
                ]
            }
        ]
    }
]